<?php echo $this -> partial('js/common/tinymce.phtml'); ?>
<script type="text/javascript">
var ns_new_event = {};
var event_form_data = {};
jQuery(function($){
  ns_new_event = {
    event_dates: null,
     init: function(is_reload){
      if (typeof is_reload == 'undefined') var is_reload=true;
      
      $('#new_event_begin_time').watermark("<?php echo $this->translate('new_event_begin_time') ?>");
      $('#new_event_end_time').watermark("<?php echo $this->translate('new_event_end_time') ?>");
      $('#new_event_begin_date').watermark("<?php echo $this->translate('new_event_begin_date') ?>");
      $('#new_event_end_date').watermark("<?php echo $this->translate('new_event_end_date') ?>");
      $('#new_event_max_price').watermark("<?php echo $this->translate('new_event_max_price') ?>");
      $('#new_event_min_price').watermark("<?php echo $this->translate('new_event_min_price') ?>");
      
      $('.timepicker').timepicker({ 'timeFormat': 'H:i', step : 15 });
      
      //tuning date range (no reversed date range)
      ns_new_event.event_dates = $('#new_event_begin_date, #new_event_end_date').datepicker({
          defaultDate: "+1w",
          changeMonth: true,
          changeYear: true,
          onSelect: function( selectedDate ) {
              var option = this.id == "new_event_begin_date" ? "minDate" : "maxDate",
                  instance = $( this ).data( "datepicker" ),
                  date = $.datepicker.parseDate(
                      instance.settings.dateFormat ||
                      $.datepicker._defaults.dateFormat,
                      selectedDate, instance.settings );
              ns_new_event.event_dates.not( this ).datepicker( "option", option, date );
          },
      });
      
      if (is_reload){
        $('#addToCategoryDiv, #addTag, .addTumblrDiv').hide();
        
        $('body').on('click','.timezone_trigger',function(){
            $('.timezone_input ').slideToggle();
            return false;
        })
        .on('click','.new_event_event_types a', function(){
          var value= $(this).data('value');
          //$("#new_event_type_caption_"+value).show("slow").siblings().hide("slow");
          $('.new_event_type_caption div').hide();
          $("#new_event_type_caption_"+value).show();
          if( ! $(this).hasClass('active') ) {
              $( ".new_event_event_type a" ).removeClass( "active" );
              $(this).addClass( "active" );
              $("#new_event_event_type").val($(this).data('value'));
          }
          $('#new_event_event_type').valid();
          return false;
        })
        .on('click','#new_event_is_free', function(){
          if ($(this).is(':checked')){
            $('#priceFree').slideUp('fast');
            $('#new_event_min_price, #new_event_max_price').prop('disabled', true);
          }else{
            $('#new_event_min_price, #new_event_max_price').prop('disabled', false);
            $('#priceFree').slideDown('fast')
          }
        }).on('change','#new_event_is_any_time, #new_event_is_all_day', function(){
              ns_new_event.updatePeriod($('#new_event_is_any_time'), $('#new_event_is_all_day'), $('#new_event_begin_date'),$('#new_event_end_date'), $('#new_event_begin_time'),$('#new_event_end_time'));
        }).on('click');
      
        ns_new_event.updatePeriod($('#new_event_is_any_time'), $('#new_event_is_all_day'), $('#new_event_begin_date'),$('#new_event_end_date'), $('#new_event_begin_time'),$('#new_event_end_time'));
        
        tinymce_ns.init('#new_event_description_toggle_editor',$('#new_event_description'));
        }
     },
     updatePeriod: function(is_any_time_input, is_all_day_input, begin_date_input, end_date_input, begin_time_input, end_time_input){
      if (is_any_time_input.is(':checked')){
        begin_date_input.prop('disabled',true);
        end_date_input.prop('disabled',true);
        begin_time_input.prop('disabled',true);
        end_time_input.prop('disabled',true);
        is_all_day_input.prop('disabled',true);
      }else{
        begin_date_input.prop('disabled',false);
        end_date_input.prop('disabled',false);
        is_all_day_input.prop('disabled',false);
        
        if (is_all_day_input.is(':checked')){
          begin_time_input.prop('disabled',true);
          end_time_input.prop('disabled',true);
        }else{
          begin_time_input.prop('disabled',false);
          end_time_input.prop('disabled',false);
        }
      }
    }
  }
  ns_new_event.init();
});
</script>
<?php if (Zend_Registry::get('config_ini')->server->online==1){
    echo $this->partial('js/new_event/map.phtml');
    echo $this->partial('js/new_event/init_map.phtml', array('mapDiv_ID'=>'new_event_map', 'ac_input_ID'=>'new_event_place', 'lat_input_ID'=>'new_event_lat', 'lng_input_ID'=>'new_event_lng', 'geo_locate_ID'=>'new_event_geo_locate'));
} ?>