<?php echo $this -> partial('js/common/tinymce.phtml'); ?>
<script type="text/javascript">
var ns_new_event = {};
var event_form_data = {};
var new_event_basic_validate_options = {};
var error_keys = [];
jQuery(function($){
  $.validator.addMethod("custom_numeric", function(value, element) {
    return ns_common_foot.isNumber(value);
  }, "Value should be numeric");
  
  $.validator.addMethod("endate_greater_startdate", function(value, element) {
    return $('[name="new_event_begin_date"]').val() <= $('[name="new_event_end_date"]').val()
}, "Enddate should be greater than Startdate");

  $.validator.addMethod("price_greater", function(value, element) {
    return $('[name="new_event_price_min"]').val() <= $('[name="new_event_price_max"]').val()
}, "Max. price should be greater than min. price");

  new_event_basic_validate_options = {
    ignore: [":hidden",".ignore"],
    rules: {
      new_event_event_type: "required",
      new_event_name: {required: true, minlength: 4, maxlength: 20} ,
      new_event_begin_date: {required: true, date: true},
      new_event_end_date: {
        required: true, date: true, endate_greater_startdate : true
      },
      new_event_begin_time: "required",
      new_event_end_time: "required",
      new_event_price_min: {required: true, custom_numeric: true} ,
      new_event_price_max: {
        required: true, 
        custom_numeric: true, 
        price_greater: true
      } ,
      cat1: "required",
      cat2: "required",
      cat3: "required"
    },
    messages: {
      cat3: '<?php echo $this->translate("Please make sure to specify 3 levels of category");?>',
      name: "Please specify your name",
      new_event_price_min: {
        required: "Min. price range is required for not free events",
        custom_numeric: "Please enter the valid min. price"
      },
      new_event_price_max: {
        required: "Max. price range is required for not free events",
        custom_numeric: "Please enter the valid max. price"
      },
      new_event_name: {
        required: "a suitable price range is required for not free events",
        minlength: "event name is too short, please enter at least 4 charactors",
        maxlength: "event name is too short, please enter at most 20 charactors"
      },
      new_event_begin_date: {
        required: "Begin date is required",
        date: "Please enter a valid begin date"
      },
      new_event_end_date: {
        required: "End date is required",
        date: "Please enter a valid end date"
      },
      new_event_begin_time: {
        required: "Begin time is required",
        date: "Please enter a valid begin time"
      },
      new_event_end_time: {
        required: "End time is required",
        date: "Please enter a valid end time"
      },
      begin_end_date_time:{
        required: "Date time is required",
      },
      new_event_price:{
        required: "Price range is required for not free events",
        custom_numeric: "Please enter the valid price range"
      }
    },
    groups: {
        begin_end_date_time: "new_event_begin_date new_event_end_date new_event_begin_time new_event_end_time",
        new_event_price: "new_event_min_price new_event_max_price",
        tree: "cat1 cat2 cat3"
    },
    //wrapper: "li",
    //errorClass: "invalid",
    errorElement: "li",
    errorContainer: $(".error_container"),
    errorLabelContainer: $(".error_container ul.errors"),
    <?php /*showErrors: function (errorMap, errorList) {
      if (this.numberOfInvalids() > 0) {
        $("p.has_error").html("Your form contains " + this.numberOfInvalids() + " errors:");
        $("p.has_error, ul.errors").show();
        } else {
          $("p.has_error, ul.errors").hide();
        }        console.log(errorMap);
        for (var key in errorMap){
          console.log(error_keys);
          console.log(key in error_keys);
          console.log(key);
          if(!key in error_keys){
            $('ul.errors').append('<li>'+errorMap[key]+'</li>');
            error_keys.push(key);
          }
        }
        this.defaultShowErrors();
        //return false;
    },*/?>
    errorPlacement: function(error, element) {
     <?php /*var element_arr = ["new_event_begin_date", "new_event_end_date", "new_event_begin_time", "new_event_end_time"];
     if ($.inArray(element.attr("name"), element_arr) != -1){ 
      //error.insertAfter("#new_event_end_time");
      $('ul.errors').append(error);
      return false;
     }
     element_arr = ["new_event_min_price", "new_event_max_price"];
     if ($.inArray(element.attr("name"), element_arr) != -1){ 
      error.insertAfter("#new_event_max_price");
      return true;
     }
     console.log(error);
     error.insertAfter(element);
     //$('ul.errors').append(error);*/?>
     var element_arr = ["cat1", "cat2", "cat3"];
     if ($.inArray(element.attr("name"), element_arr) != -1){ 
      error.insertAfter("#cat3");
      return false;
     }
     
     //if (!error.hasClass('valid'))$('ul.errors').append(error);
     //return false;
   },
   submitHandler: function(form) {
     //ns_common_foot.saveFormToCookie('new_event_basic');
     //ns_common_foot.saveFormToCookie('new_event_advanced', $.cookie('new_event_basic'));
     form.submit();
   },
   invalidHandler: function(event, validator) {
     ns_new_event.init(false);
     //ns_common_foot.showFlashMessages([{'error' : 'please correct the input(s).'}]);
   }
 };
  ns_new_event = {
    form_css_selector: "#new_event_basic",
    optional_fields: {
      'new_event_place':{
        name:'new_event_traffic_note',
        height:240,
        text: '<?php echo $this->translate('new_event_traffic_note');?>'
      },
      'new_event_datetime':{
        name:'new_event_datetime_note',
        height:55,
        text: '<?php echo $this->translate('new_event_datetime_note');?>'
      },
      'new_event_price':{
        name:'new_event_price_note',
        height:30,
        text: '<?php echo $this->translate('new_event_price_note');?>'
      },
      'new_event_application':{
        name:'new_event_application_datetime_note',
        height:0,
        text: '<?php echo $this->translate('new_event_application_datetime_note');?>'
      },
      'new_event_organiser':{
        name:'new_event_organiser_detail',
        height:0,
        text: '<?php echo $this->translate('new_event_organiser_detail');?>'
      }
    },
    event_dates: null,
    saved_event_templates : {},
    init: function(is_reload){
      var self = this;
      for (var key in self.optional_fields){
        if (jQuery('.'+self.optional_fields[key].name).length){
            jQuery('.'+key).readmore({
              startOpen: false,
              speed: 75,
              beforeToggle: function(trigger, element, expanded) {
                if(expanded) { // The "expand" link was clicked
                  //console.log('will expand...')
                  element.find('.more').css('display','block');
                }
              },
              afterToggle: function(trigger, element, expanded) {
                if(!expanded) { // The "Close" link was clicked
                  //console.log('expanded...')
                  element.find('.more').hide();
                }
              },
              maxHeight: self.optional_fields[key].height,
              moreLink: '<div class="f_div"><a href="#" class="new_event_more_btn text_link">'+self.optional_fields[key].text+'...</a></div>',
              lessLink: '<div class="f_div"><a href="#" class="new_event_more_btn text_link"><?php echo $this->translate('Collapse...')?></a></div>',
            });
            jQuery('.'+self.optional_fields[key].name).hide();
        }
      }
      if (typeof is_reload == 'undefined') var is_reload=true;
      
      $('.timepicker').timepicker({ 'timeFormat': 'H:i', step : 15 });
      
      //tuning date range (no reversed date range)
      ns_new_event.event_dates = $('#new_event_begin_date, #new_event_end_date').datepicker({
          defaultDate: "+1w",
          changeMonth: true,
          changeYear: true,
          onSelect: function( selectedDate ) {
              var option = this.id == "new_event_begin_date" ? "minDate" : "maxDate",
                  instance = $( this ).data( "datepicker" ),
                  date = $.datepicker.parseDate(
                      instance.settings.dateFormat ||
                      $.datepicker._defaults.dateFormat,
                      selectedDate, instance.settings );
              ns_new_event.event_dates.not( this ).datepicker( "option", option, date );
          },
      });
      $('#new_event_begin_date, #new_event_end_date').val($.datepicker.formatDate('yy-mm-dd', ns_common_head.today));
      <?php foreach(Common::getSession()->user_saved_event_templates as $value){ ?>
        self.saved_event_templates['<?php echo $value['name']?>']=JSON.parse(<?php echo json_encode($value['data'])?>);
      <?php } ?>
      if (is_reload){
        //ns_common_foot.loadCookieToForm($('.event_form form, .advanced_event_form form').prop('id'));
      
        //$('#addToCategoryDiv, #addTag, .addTumblrDiv').hide();
        
        $('body').on('click','.timezone_trigger',function(){
            $('.timezone_input ').slideToggle();
            return false;
        })
        .on('click','.new_event_event_types a', function(){
          var value= $(this).data('value');
          //$("#new_event_type_caption_"+value).show("slow").siblings().hide("slow");
          $('.new_event_type_caption div').hide();
          $("#new_event_type_caption_"+value).show();
          if( ! $(this).hasClass('active') ) {
              $( ".new_event_event_types a" ).removeClass( "active" );
              $(this).addClass( "active" );
              $("#new_event_event_type").val($(this).data('value'));
          }
          $('#new_event_event_type').valid();
          return false;
        })
        .on('click','[name="new_event_price_is_free"]', function(){
          console.log($(this).is(':checked'))
          if ($(this).is(':checked')){
            //$('#priceFree').slideUp('fast');
            $('#new_event_price_min, #new_event_price_max').prop('disabled', true);
          }else{
            $('#new_event_price_min, #new_event_price_max').prop('disabled', false);
            //$('#priceFree').slideDown('fast')
          }
        }).on('change','#new_event_is_any_time, #new_event_is_all_day', function(){
              ns_new_event.updatePeriodInputs($('#new_event_is_any_time'), $('#new_event_is_all_day'), $('#new_event_begin_date'),$('#new_event_end_date'), $('#new_event_begin_time'),$('#new_event_end_time'));
      })
      <?php /*.on('click','.new_event_load',function(){
        console.log('new_event_load')
        //ns_common_foot.loadCookieToForm($('.event_form form, .advanced_event_form form').prop('id'));
      })*/?>
      .on('click', function(){
      
        //check inputs
        ns_new_event.updateFromHiddenInputs();
        
        ns_new_event.updatePeriodInputs($('#new_event_is_any_time'), $('#new_event_is_all_day'), $('#new_event_begin_date'),$('#new_event_end_date'), $('#new_event_begin_time'),$('#new_event_end_time'));
        
      }).on('click','.save_event_template',function(){
        var is_confirm_add = false;
        ns_common_head.jQDialog(
            '<?php echo $this->translate('save this location') ?>',
            '<?php echo $this->baseUrl('ajax/dialog/save_event_template')?>',
            {
                'title':$('#new_event_name').val()
            },
            {
                Save: function() {
                  if ($.trim($('.save_event_template_name').val())==''){
                    $('.dialog').prepend('<p><?php echo $this->translate('Please specify the name before saving.')?></p>');
                    return false;
                  }
                  var event_template_name=$('.dialog input.save_event_template_name').val();
                  if ($('.user_saved_event_template_list [data-value='+event_template_name+']').length>0 && ! is_confirm_add){
                    $('.dialog').prepend('<p><?php echo $this->translate('same name exists in your saved event templates, do you still want to override?')?></p>');
                    is_confirm_add = true;
                    return false;
                  }
                    var dialog=$(this);
                    var form_data = $(self.form_css_selector).serializeObject();
                    $.ajax({
                      type: "POST",
                      url: "<?php echo $this->baseUrl('ajax/user/save_event_template') ?>",
                        data: {
                            name:event_template_name,
                            data: JSON.stringify(form_data)
                        },
                      success: function(msg){
                        if (msg['result']==1){
                          self.saved_event_templates[event_template_name]=form_data;
                          if ($('.user_saved_event_template_list [data-value='+event_template_name+']').length==0){
                            $(".user_saved_event_template_list .opt_insert").append("<option data-value=\""+event_template_name+"\"  value=\"[insert]"+event_template_name+"\">"+event_template_name+"</option>")
                            $(".user_saved_event_template_list .opt_delete").append("<option data-value=\""+event_template_name+"\"  value=\"[delete]"+event_template_name+"\">"+event_template_name+"</option>")
                          }
-                         $(".user_saved_event_template_list").val("[insert]"+event_template_name);
                          $('.user_saved_event_template_list').trigger('chosen:updated');
                          dialog.dialog( "close" );
                        }else{
                            $('.dialog').prepend('<p><?php echo $this->translate('unknown error occured, please try again.')?></p>')
                        }
                        console.log(self.saved_event_templates)
                      },
                      dataType:'json'
                    });

                },
                Cancel: function() {
                    $( this ).dialog( "close" );
                }
              }
          );
          return false;
       }).on('change','.user_saved_event_template_list',function(){
         console.log('changed!')
         var element = $(this).find('option:selected');
         var value = element.data('value');
         if(element.parent('optgroup').hasClass('opt_insert')){
            $(self.form_css_selector).find('input, textarea').each(function(){
            var template = self.saved_event_templates[value];
            if ($(this).prop('name').length && $(this).prop('name') in template){
              console.log($(this))
              console.log(template[$(this).prop('name')])
              if ($(this).is(':checkbox')){
                console.log($(this).prop('name'))
                if (template[$(this).prop('name')]==1)$(this).prop('checked',true);
                else $(this).prop('checked',false)
              }else{
                $(this).val(template[$(this).prop('name')]);
              }
            }
          });
         }else{
           $.ajax({
              type: "POST",
              url: "<?php echo $this->baseUrl('ajax/user/delete_event_template') ?>",
                data: {
                    'name':value,
                },
              success: function(msg){
                if (msg['result']==1){
                    $(".user_saved_event_template_list").val("");
                    $(".user_saved_event_template_list option[data-value='"+value+"']").remove();
                    $('.user_saved_event_template_list').trigger('chosen:updated');
                }else{
                    $('#dialog').prepend('<p><?php echo $this->translate('unknown error occured, please try again.')?></p>')
                }
              },
            dataType:'json'
          });
         }
         return false;
       })
      }
      
      $('#new_event_begin_time').watermark("<?php echo $this->translate('new_event_begin_time') ?>").val(ns_common_head.today.getHours()+':'+ns_common_head.today.getMinutes());
      $('#new_event_end_time').watermark("<?php echo $this->translate('new_event_end_time') ?>").val(ns_common_head.today.getHours()+1 +':'+ns_common_head.today.getMinutes());
      $('#new_event_begin_date').watermark("<?php echo $this->translate('new_event_begin_date') ?>");
      $('#new_event_end_date').watermark("<?php echo $this->translate('new_event_end_date') ?>");
      $('#new_event_max_price').watermark("<?php echo $this->translate('new_event_max_price') ?>");
      $('#new_event_min_price').watermark("<?php echo $this->translate('new_event_min_price') ?>");
      
      $('.user_saved_event_template_list').chosen();
     },
     updatePeriodInputs: function(is_any_time_input, is_all_day_input, begin_date_input, end_date_input, begin_time_input, end_time_input){
      /*if ($('#new_event_begin_time').val()<=
        // to do check if begin time is equal or later than end time
      })*/
      if (is_any_time_input.is(':checked')){
        begin_date_input.prop('disabled',true);
        end_date_input.prop('disabled',true);
        begin_time_input.prop('disabled',true);
        end_time_input.prop('disabled',true);
        is_all_day_input.prop('disabled',true);
      }else{
        begin_date_input.prop('disabled',false);
        end_date_input.prop('disabled',false);
        is_all_day_input.prop('disabled',false);
        
        if (is_all_day_input.is(':checked')){
          begin_time_input.prop('disabled',true);
          end_time_input.prop('disabled',true);
        }else{
          begin_time_input.prop('disabled',false);
          end_time_input.prop('disabled',false);
        }
      }
    },
    updateFromHiddenInputs: function(){
      //console.log('updateFromHiddenInputs');
      if ($('#new_event_event_type').val()!=''){
          $("#new_event_type_caption_"+$('#new_event_event_type').val()).show();
          $('.new_event_event_types a[data-value="'+$('#new_event_event_type').val()+'"]').addClass( "active" );
      }
      if ($('#tree_text').val()!=''){
          $('p.tree_line_hidden').text($('#tree_text').val())
          $('p.tree_line_hidden').css('display','inline-block');
          $('.tree_line_hidden').show();
          $('label.tree_line_hidden').css('display','inline-block');
          $('p.tree_line_hidden').css('display','inline-block');
      }
    }
  }
  
  ns_new_event.init();
});
</script>
<?php if (Zend_Registry::get('config_ini')->server->online==1){
    echo $this->partial('js/new_event/map.phtml');
} ?>