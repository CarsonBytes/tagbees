<?php echo $this->partial('js/common/functions.phtml')?>
<script type="text/javascript">
(function($) {
      $.timeago = function(timestamp) {
        if (timestamp instanceof Date) {
          return inWords(timestamp);
        } else if (typeof timestamp === "string") {
          return inWords($.timeago.parse(timestamp));
        } else {
          return inWords($.timeago.datetime(timestamp));
        }
      };
      var $t = $.timeago;
    
      $.extend($.timeago, {
        settings: {
          refreshMillis: 60000,
          allowFuture: false,
          strings: {
            prefixAgo: null,
            prefixFromNow: null,
            suffixAgo: "<?php echo $this->translate(' ago')?>",
            suffixFromNow: "<?php echo $this->translate('from now')?>",
            seconds: "<?php echo $this->translate('just before')?>",
            minute: "<?php echo $this->translate('about a minute')?>",
            minutes: "<?php echo $this->translate('%d minutes')?>",
            hour: "<?php echo $this->translate('about an hour')?>",
            hours: "<?php echo $this->translate('about %d hours')?>",
            day: "<?php echo $this->translate('a day')?>",
            days: "<?php echo $this->translate('%d days')?>",
            month: "<?php echo $this->translate('about a month')?>",
            months: "<?php echo $this->translate('%d months')?>",
            year: "<?php echo $this->translate('about a year')?>",
            years: "<?php echo $this->translate('%d years')?>",
            numbers: []
          }
        },
        inWords: function(distanceMillis) {
            var $l = this.settings.strings;
            var prefix = $l.prefixAgo;
            var suffix = $l.suffixAgo;
            if (this.settings.allowFuture) {
              if (distanceMillis < 0) {
                prefix = $l.prefixFromNow;
                suffix = $l.suffixFromNow;
              }
            }
    
            var seconds = Math.abs(distanceMillis) / 1000;
            var minutes = seconds / 60;
            var hours = minutes / 60;
            var days = hours / 24;
            var years = days / 365;
    
            function substitute(stringOrFunction, number) {
              var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;
              var value = ($l.numbers && $l.numbers[number]) || number;
              return string.replace(/%d/i, value);
            }
    
            var words = seconds < 45 && substitute($l.seconds, Math.round(seconds)) ||
              seconds < 90 && substitute($l.minute, 1) ||
              minutes < 45 && substitute($l.minutes, Math.round(minutes)) ||
              minutes < 90 && substitute($l.hour, 1) ||
              hours < 24 && substitute($l.hours, Math.round(hours)) ||
              hours < 48 && substitute($l.day, 1) ||
              days < 30 && substitute($l.days, Math.floor(days)) ||
              days < 60 && substitute($l.month, 1) ||
              days < 365 && substitute($l.months, Math.floor(days / 30)) ||
              years < 2 && substitute($l.year, 1) ||
              substitute($l.years, Math.floor(years));
    
            return $.trim([prefix, words, suffix].join(""));
          },
          parse: function(iso8601) {
            var s = $.trim(iso8601);
            s = s.replace(/\.\d\d\d+/,""); // remove milliseconds
            s = s.replace(/-/,"/").replace(/-/,"/");
            s = s.replace(/T/," ").replace(/Z/," UTC");
            s = s.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"); // -04:00 -> -0400
            return new Date(s);
          },
          datetime: function(elem) {
            // jQuery's `is()` doesn't play well with HTML5 in IE
            var isTime = $(elem).get(0).tagName.toLowerCase() === "time"; // $(elem).is("time");
            var iso8601 = isTime ? $(elem).attr("datetime") : $(elem).attr("title");
            return $t.parse(iso8601);
          }
        });
    
        $.fn.timeago = function() {
          var self = this;
          self.each(refresh);
    
          var $s = $t.settings;
          if ($s.refreshMillis > 0) {
            setInterval(function() { self.each(refresh); }, $s.refreshMillis);
          }
          return self;
        };
    
        function refresh() {
          var data = prepareData(this);
          if (!isNaN(data.datetime)) {
            $(this).text(inWords(data.datetime));
          }
          return this;
        }
    
        function prepareData(element) {
          element = $(element);
          if (!element.data("timeago")) {
            element.data("timeago", { datetime: $t.datetime(element) });
            var text = $.trim(element.text());
            if (text.length > 0) {
              element.attr("title", text);
            }
          }
          return element.data("timeago");
        }
    
        function inWords(date) {
          return $t.inWords(distance(date));
        }
    
        function distance(date) {
          return (new Date().getTime() - date.getTime());
        }
    
        // fix for IE6 suckage
        document.createElement("abbr");
        document.createElement("time");
    }(jQuery));
    
   jQuery(function($){
        $('body').on('click','.language ul ul li',function(){
            $.ajax({
              type: "POST",
              url: "<?php echo $this->baseUrl('ajax/language/switch') ?>",
                data: {
                    display_lang:$(this).find('input').val()
                },
              success: function(msg){
                if(msg['result']==true){
                    window.location.hash = ''; //if you want to reload with an empty hash
                    window.location.reload(true); //reload the page and bypass the cache
                }else{
                    alert('Unkown error occured. Please try again later.')
                }
                },
                dataType:'json'
            });
            return false;
        })
        .on('click','.flash_message .close',function(){
            $(this).parents('.flash_message').fadeOut(400);
            return false;
        })
        $('.login_info .login').qtip({
            content: {
                text: '<p style="text-align:center;"><img class="throbber" src="<?php echo $this->baseUrl('images/throbber.gif')?>" alt="Loading..." /></p>',
                ajax: {
                    url: '<?php echo $this->baseUrl('ajax/auth/open_login_box')?>',
                    success: function(data, status) {
                        if (data.result == 'false'){
                            this.set('content.text', 'already loginned!');
                        } else {
                            this.set('content.text', $( "#login" ).tmpl(data.data));
                        }
                        $('input.username').watermark("<?php echo $this->translate('Username') ?>");
                        $('input.password').watermark("<?php echo $this->translate('Password') ?>");
                    },
                    once: true,
                    loading: true
                },
                title: {
                    text: 'Login'
                }
            },
            show: {
                event: 'click',
                modal: {
                    on: true
                }
            },
            position: {
                my: 'center',
                at: 'center',
                target: $(window)
            },
            style: {
                def:false,
                classes: 'qtip-light qtip-rounded login_dialog'
            }
        });
        
        $('body').on('click', '.watcher_icon' , function() {
            $(this).qtip(
            {
                //overwrite: false, 
                content: {
                    text: '<img class="throbber" src="<?php echo $this->baseUrl('images/throbber.gif')?>" alt="Loading..." />',
                    ajax: {
                        url: '<?php echo $this->baseUrl('ajax/bookmark/open_box_trigger')?>', 
                        success: function(data, status) {
                            this.set('content.text', $( "#bookmark_box_trigger" ).tmpl());
                        }
                    },
                    title: {
                        text: 'Bookmark details'
                    }
                },
                position: {
                    at: 'bottom center', 
                    my: 'top right',
                    target: $(this)
                },
                show: {
                     ready: true
                },
                style: {
                    def:false,
                    classes: 'qtip-light bookmark_box_trigger qtip-shadow'
                }
            })
        })
        
        var loginined_popup;
        $('body').on('click', '.login_info .grid_icon' , function() {
            var target = $(this) ;
            if (!target.hasClass('active')){
                if (typeof loginined_popup == 'undefined' ){
                    loginined_popup = $(this).qtip(
                        {
                            content: {
                                text: '<img class="throbber" src="<?php echo $this->baseUrl('images/throbber.gif')?>" alt="Loading..." />',
                                ajax: {
                                    url: '<?php echo $this->baseUrl('ajax/header/open_loginned_popup')?>', 
                                    success: function(data, status) {
                                        this.set('content.text', $( "#loginned_popup" ).tmpl());
                                    },
                                    once: true
                                },
                                title: {
                                    button: false
                                }
                            },
                            events: {
                                hidden: function(event, api) {
                                    target.removeClass('active');
                                }
                            },
                            position: {
                                at: 'bottom center', 
                                my: 'top right',
                                target: $(this)
                            },
                            show: {
                                 ready: true
                            },
                            style: {
                                def:false,
                                classes: 'qtip-light loginned_popup qtip-shadow'
                            }
                        })
                   }else{
                     loginined_popup.qtip('show');
                   }
            } else {
                loginined_popup.qtip('hide');
            }
            target.toggleClass('active');
        });
        $('input.username').watermark("<?php echo $this->translate('Username') ?>");
        $('input.password').watermark("<?php echo $this->translate('Password') ?>");
        $('input.keyword_text').watermark("<?php echo $this->translate('Enter keyword...') ?>");
        $('.loc_right input').watermark("<?php echo $this->translate('Enter a location...') ?>");
        
        //defining daterange below search bar...
        //$.datepicker.setDefaults($.datepicker.regional['zh-HK']);
        
       /*$("select.selectBoxIt").selectBoxIt({
          showEffect: "fadeIn",
          showEffectSpeed: 100,
          hideEffect: "fadeOut",
          hideEffectSpeed: 100
       });*/
  updateVariablesFromUrlParams();
  updateFeedInputsFromVariables();
});
      
</script>
<?php echo $this->partial('js/template/auth/login.phtml')?>
<?php echo $this->partial('js/template/bookmark/box_trigger.phtml')?>>
<?php echo $this->partial('js/template/header/loginned_popup.phtml')?>