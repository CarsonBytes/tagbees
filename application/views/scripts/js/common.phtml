<script type="text/javascript">
      //common functions
        // to check the size of asso. array
        Object.size = function(obj) {
            var size = 0, key;
            for (key in obj) {
                if (obj.hasOwnProperty(key)) size++;
            }
            return size;
        };
        
        function mysqlTimeStampToDate(timestamp) {
            //function parses mysql datetime string and returns javascript Date object
            //input has to be in this format: 2007-06-05 15:26:02
            var regex=/^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9]) (?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9]))?$/;
            var parts=timestamp.replace(regex,"$1 $2 $3 $4 $5 $6").split(' ');
            return new Date(parts[0],parts[1]-1,parts[2],parts[3],parts[4],parts[5]);
        }
        
        function scrollToAnchor(aid){
           var aTag = $("a[name='"+ aid.replace('#','') +"']");
           $('html,body').animate({scrollTop: aTag.offset().top},'slow');
        }
        
        function getURLParameterValue(name) {
            return decodeURI(
                (RegExp(name + '=' + '(.+?)(&|$)').exec(location.search)||[,''])[1]
            );
        }
        
        function showFlashMessages(content){
            //if (jQuery(".flash_message").is(':visible'))
            //  jQuery(".flash_message").hide();
            jQuery( "#flash_message_tmpl" ).tmpl( content ).appendTo( ".flash_messages" );
            jQuery(".flash_messages").fadeIn(300).delay(5000).fadeOut(300, function(){
               jQuery(this).empty();
            });
        }
        function getFlashMessageType(data){
            if (typeof data == 'object'){
                for (x in data){
                    return x;
                }
            }
            return 'default';
        }
        function getFlashMessageHtml(data){
            if (typeof data == 'object'){
                for (x in data){
                    return data[x];
                }
            }
            return data;
        }
        
        function hideMoreButton(more_flag, type, obj_selector){
            //var content = [{'error' : '<?php echo $this->translate('There is no more to load.')?>'}] ;
            //showFlashMessages(content);
            if (typeof more_flag == 'undefined') var more_flag=false;
            if (typeof type == 'undefined') var type = 'index';
            if (typeof obj_selector == 'undefined') var obj_selector = '.feeds_and_more .feeds';
        
            $(".load_more_feeds .more").hide();
            $(".load_more_feeds .loading").hide();
            var text = '';
            if (type == 'index'){
                text = '<p>No results. Please loosen the filters</p>';
            } else if ($type =='user_bookmarks'){
                text = '<p>That\'s all your bookmarks</p>';
            }
            if (more_flag) $(obj_selector).append(text);
            else $(obj_selector).html(text);
        }
        
        function isNumber(n) {
          return !isNaN(parseFloat(n)) && isFinite(n);
        }
        
        
        /*
         * array or list item suffle 
         * Example 1: shuffle an unordered list
            $('ul').shuffle();
            
            Example 2: shuffle an array
            var arr = [1,2,3,4,5,6];
            arr = $.shuffle(arr);
         */
        (function($){
          $.fn.shuffle = function() {
            return this.each(function(){
              var items = $(this).children();
              return (items.length)
                ? $(this).html($.shuffle(items))
                : this;
            });
          }
         
          $.shuffle = function(arr) {
            for(
              var j, x, i = arr.length; i;
              j = parseInt(Math.random() * i),
              x = arr[--i], arr[i] = arr[j], arr[j] = x
            );
            return arr;
          }
        })(jQuery);
        
        
        
        function getNow () {
          var currentDate = new Date()
          var day = currentDate.getDate()
          var month = currentDate.getMonth() + 1
          var year = currentDate.getFullYear()
          var hours = currentDate.getHours()
          var minutes = currentDate.getMinutes()
          var seconds = currentDate.getSeconds()
            if (minutes < 10)  minutes = "0" + minutes
            if (seconds < 10)  seconds = "0" + seconds
           return year+ "-" + month + "-" + day  + " "+ hours + ":" + minutes +":" + seconds + " ";
        }
        
        
        
        function goToByScroll(id){
                $('html,body').animate({scrollTop: $("#"+id).offset().top},'slow');
        }
        
        /*
         * clone object by jQuery.extend (deep copy)
         * @param: source / 來源物件
         * @param: append / 附加的值 (非必要)
         */
        function clone (source, append) {
          if ('undefined' !== typeof append) {
            var obj = jQuery.extend({}, source);
            return jQuery.extend(true, obj, append);
          } else {
            return jQuery.extend(true, {}, source);
          }
        }
        //RETURN KEYS OF AN OBJECT
        $.extend({
            keys:    function(obj){
                var a = [];
                $.each(obj, function(k){ a.push(k) });
                return a;
            }
        })
(function($) {
      $.timeago = function(timestamp) {
        if (timestamp instanceof Date) {
          return inWords(timestamp);
        } else if (typeof timestamp === "string") {
          return inWords($.timeago.parse(timestamp));
        } else {
          return inWords($.timeago.datetime(timestamp));
        }
      };
      var $t = $.timeago;
    
      $.extend($.timeago, {
        settings: {
          refreshMillis: 60000,
          allowFuture: false,
          strings: {
            prefixAgo: null,
            prefixFromNow: null,
            suffixAgo: "<?php echo $this->translate(' ago')?>",
            suffixFromNow: "<?php echo $this->translate('from now')?>",
            seconds: "<?php echo $this->translate('just before')?>",
            minute: "<?php echo $this->translate('about a minute')?>",
            minutes: "<?php echo $this->translate('%d minutes')?>",
            hour: "<?php echo $this->translate('about an hour')?>",
            hours: "<?php echo $this->translate('about %d hours')?>",
            day: "<?php echo $this->translate('a day')?>",
            days: "<?php echo $this->translate('%d days')?>",
            month: "<?php echo $this->translate('about a month')?>",
            months: "<?php echo $this->translate('%d months')?>",
            year: "<?php echo $this->translate('about a year')?>",
            years: "<?php echo $this->translate('%d years')?>",
            numbers: []
          }
        },
        inWords: function(distanceMillis) {
            var $l = this.settings.strings;
            var prefix = $l.prefixAgo;
            var suffix = $l.suffixAgo;
            if (this.settings.allowFuture) {
              if (distanceMillis < 0) {
                prefix = $l.prefixFromNow;
                suffix = $l.suffixFromNow;
              }
            }
    
            var seconds = Math.abs(distanceMillis) / 1000;
            var minutes = seconds / 60;
            var hours = minutes / 60;
            var days = hours / 24;
            var years = days / 365;
    
            function substitute(stringOrFunction, number) {
              var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;
              var value = ($l.numbers && $l.numbers[number]) || number;
              return string.replace(/%d/i, value);
            }
    
            var words = seconds < 45 && substitute($l.seconds, Math.round(seconds)) ||
              seconds < 90 && substitute($l.minute, 1) ||
              minutes < 45 && substitute($l.minutes, Math.round(minutes)) ||
              minutes < 90 && substitute($l.hour, 1) ||
              hours < 24 && substitute($l.hours, Math.round(hours)) ||
              hours < 48 && substitute($l.day, 1) ||
              days < 30 && substitute($l.days, Math.floor(days)) ||
              days < 60 && substitute($l.month, 1) ||
              days < 365 && substitute($l.months, Math.floor(days / 30)) ||
              years < 2 && substitute($l.year, 1) ||
              substitute($l.years, Math.floor(years));
    
            return $.trim([prefix, words, suffix].join(""));
          },
          parse: function(iso8601) {
            var s = $.trim(iso8601);
            s = s.replace(/\.\d\d\d+/,""); // remove milliseconds
            s = s.replace(/-/,"/").replace(/-/,"/");
            s = s.replace(/T/," ").replace(/Z/," UTC");
            s = s.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"); // -04:00 -> -0400
            return new Date(s);
          },
          datetime: function(elem) {
            // jQuery's `is()` doesn't play well with HTML5 in IE
            var isTime = $(elem).get(0).tagName.toLowerCase() === "time"; // $(elem).is("time");
            var iso8601 = isTime ? $(elem).attr("datetime") : $(elem).attr("title");
            return $t.parse(iso8601);
          }
        });
    
        $.fn.timeago = function() {
          var self = this;
          self.each(refresh);
    
          var $s = $t.settings;
          if ($s.refreshMillis > 0) {
            setInterval(function() { self.each(refresh); }, $s.refreshMillis);
          }
          return self;
        };
    
        function refresh() {
          var data = prepareData(this);
          if (!isNaN(data.datetime)) {
            $(this).text(inWords(data.datetime));
          }
          return this;
        }
    
        function prepareData(element) {
          element = $(element);
          if (!element.data("timeago")) {
            element.data("timeago", { datetime: $t.datetime(element) });
            var text = $.trim(element.text());
            if (text.length > 0) {
              element.attr("title", text);
            }
          }
          return element.data("timeago");
        }
    
        function inWords(date) {
          return $t.inWords(distance(date));
        }
    
        function distance(date) {
          return (new Date().getTime() - date.getTime());
        }
    
        // fix for IE6 suckage
        document.createElement("abbr");
        document.createElement("time");
    }(jQuery));
    
<?php //update variables from url parameters ?>
function updateVariablesFromUrlParams(){
    for (key in default_feed_para){
        var value = getURLParameterValue(key);
        if (isFeedParameterValid(key, value) && value != ""){
            feed_para[key] = value;
            updateUrlParam(key, value);
        } else {
            feed_para[key] = default_feed_para[key];
        }
    }
}

<?php //update feed option inputs from feed_para ?>
function updateFeedInputsFromVariables(){
    for (key in feed_para){
        if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
            if (feed_para[key] == 1) {
                jQuery('.feed_filter_input[name="'+key+'"]').prop('checked','checked');
            } else {
                jQuery('.feed_filter_input[name="'+key+'"]').removeProp('checked','checked');
            }
            if (key == 'is_show_map'){
                if (feed_para[key] == 1){
                   $('#map_wrapper').show();
                    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                        initMap();
                    <?php } ?>
                }
            }
        } else if (key == 'sort_by'){
            updateSortByInput(feed_para[key]);
        } else if (key == 'q') { 
        } else if (key == 'radius') {
            $('.feed_filter_input[name="'+key+'"]').val(feed_para[key]);
            $('#filter_radius').text(feed_para[key]);
        } else if (key == 'begin_date' || key == 'end_date') {
            $('.feed_filter_input[name="'+key+'"]').datepicker("setDate", feed_para[key] );
        }
    }
    if (feed_para['is_match_location']==1){
        jQuery('.match_location_set').show();
    } else {
        jQuery('.match_location_set').hide();
    }

    if ( !("is_all_time" in feed_para) ||  feed_para['is_all_time']==1){
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').prop('disabled','disabled');
    } else {
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').removeProp('disabled');
    }
}
function isFeedParameterValid(key, value){
    if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
        if (value == "") return false;
            if (value == 1 || value == 0) return true;
    } else if (key == 'sort_by'){
        if (value == "") return false;
        if (value == 2 || value == 1 || value == 0) return true;
    } else if (key == 'q') {
         return true;
    } else if (key == 'radius' || key == 'lat' || key == 'lng') {
        if (isNumber(value) || value == "") return true;
    } else if (key == 'begin_date' || key == 'end_date') {
        if (value == "") return true;
        var regex = /^\d{4}-\d{1,2}-\d{1,2}$/gm;
        if (regex.test(value)) return true;
    }
    return false;
}

function navigateToUrl(url) {
    var f = document.createElement("FORM");
    f.action = url;

    var indexQM = url.indexOf("?");
    if (indexQM>=0) {
        // the URL has parameters => convert them to hidden form inputs
        var params = url.substring(indexQM+1).split("&");
        for (var i=0; i<params.length; i++) {
            var keyValuePair = params[i].split("=");
            var input = document.createElement("INPUT");
            input.type="hidden";
            input.name  = keyValuePair[0];
            input.value = keyValuePair[1];
            f.appendChild(input);
        }
    }

    document.body.appendChild(f);
    f.submit();
}

   jQuery(function($){
        $('body').on('click','.language ul ul li',function(){
            $.ajax({
              type: "POST",
              url: "<?php echo $this->baseUrl('ajax/language/switch') ?>",
                data: {
                    display_lang:$(this).find('input').val()
                },
              success: function(msg){
                if(msg['result']==true){
                    window.location.hash = ''; //if you want to reload with an empty hash
                    window.location.reload(true); //reload the page and bypass the cache
                    window.location.replace($(location).attr('href'));
                }else{
                    alert('Unkown error occured. Please try again later.')
                }
                },
                dataType:'json'
            });
            return false;
        })
        .on('click','.flash_message .close',function(){
            $(this).parents('.flash_message').fadeOut(400);
            return false;
        })
        $('.login').qtip({
            content: {
                text: '<p style="text-align:center;"><img class="throbber" src="<?php echo $this->baseUrl('images/throbber.gif')?>" alt="Loading..." /></p>',
                ajax: {
                    url: '<?php echo $this->baseUrl('ajax/auth/open_login_box')?>',
                    success: function(data, status) {
                        if (data.result == 'false'){
                            this.set('content.text', 'already loginned!');
                        } else {
                            this.set('content.text', $( "#login" ).tmpl(data.data));
                        }
                        $('input.username').watermark("<?php echo $this->translate('Username') ?>");
                        $('input.password').watermark("<?php echo $this->translate('Password') ?>");
                    },
                    once: true,
                    loading: true
                },
                title: {
                    text: 'Login'
                }
            },
            show: {
                event: 'click',
                modal: {
                    on: true
                }
            },
            position: {
                my: 'center',
                at: 'center',
                target: $(window)
            },
            style: {
                def:false,
                classes: 'qtip-light qtip-rounded login_dialog'
            }
        });
        
        $('body').on('click', '.watcher_icon' , function() {
            $(this).qtip(
            {
                //overwrite: false, 
                content: {
                    text: '<img class="throbber" src="<?php echo $this->baseUrl('images/throbber.gif')?>" alt="Loading..." />',
                    ajax: {
                        url: '<?php echo $this->baseUrl('ajax/bookmark/open_box_trigger')?>', 
                        success: function(data, status) {
                            this.set('content.text', $( "#bookmark_box_trigger" ).tmpl());
                        }
                    },
                    title: {
                        text: 'Bookmark details'
                    }
                },
                position: {
                    at: 'bottom center', 
                    my: 'top right',
                    target: $(this)
                },
                show: {
                     ready: true
                },
                style: {
                    def:false,
                    classes: 'qtip-light bookmark_box_trigger qtip-shadow'
                }
            })
        })
        
        var loginined_popup;
        $('body').on('click', '.login_info .grid_icon' , function() {
            var target = $(this) ;
            if (!target.hasClass('active')){
                if (typeof loginined_popup == 'undefined' ){
                    loginined_popup = $(this).qtip(
                        {
                            content: {
                                text: '<img class="throbber" src="<?php echo $this->baseUrl('images/throbber.gif')?>" alt="Loading..." />',
                                ajax: {
                                    url: '<?php echo $this->baseUrl('ajax/header/open_loginned_popup')?>', 
                                    success: function(data, status) {
                                        this.set('content.text', $( "#loginned_popup" ).tmpl());
                                    },
                                    once: true
                                },
                                title: {
                                    button: false
                                }
                            },
                            events: {
                                hidden: function(event, api) {
                                    target.removeClass('active');
                                }
                            },
                            position: {
                                at: 'bottom center', 
                                my: 'top right',
                                target: $(this)
                            },
                            show: {
                                 ready: true
                            },
                            style: {
                                def:false,
                                classes: 'qtip-light loginned_popup qtip-shadow'
                            }
                        })
                   }else{
                     loginined_popup.qtip('show');
                   }
            } else {
                loginined_popup.qtip('hide');
            }
            target.toggleClass('active');
        });
        $('input.username').watermark("<?php echo $this->translate('Username') ?>");
        $('input.password').watermark("<?php echo $this->translate('Password') ?>");
        $('input.keyword_text').watermark("<?php echo $this->translate('Enter keyword...') ?>");
        $('.loc_right input').watermark("<?php echo $this->translate('Enter a location...') ?>");
        
        //defining daterange below search bar...
        //$.datepicker.setDefaults($.datepicker.regional['zh-HK']);
        
       /*$("select.selectBoxIt").selectBoxIt({
          showEffect: "fadeIn",
          showEffectSpeed: 100,
          hideEffect: "fadeOut",
          hideEffectSpeed: 100
       });*/
        //from form data to object
        $.fn.serializeObject = function()
        {
            var o = {};
            var a = this.serializeArray();
            $.each(a, function() {
                if (o[this.name] !== undefined) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        };
        
        updateVariablesFromUrlParams();
        updateFeedInputsFromVariables();
      });
      
</script>
<?php echo $this->partial('js/template/auth/login.phtml')?>
<?php echo $this->partial('js/template/bookmark/box_trigger.phtml')?>>
<?php echo $this->partial('js/template/header/loginned_popup.phtml')?>