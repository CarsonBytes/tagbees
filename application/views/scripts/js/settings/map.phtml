<?php
if (isset(Common::getSession()->user_signup->display_lang)){
    if (Common::getSession()->user_signup->display_lang=='zh-hk')$language='zh-tw';
    else $language=Common::getSession()->user_signup->display_lang;
}else{
    $language='en';
}?>

<script type="text/javascript">
var marker;
var map;
var home_icon='<?php echo $this->baseUrl('images/map/home.png')?>';
var autocomplete;
var settings_form_lat = <?php echo isset(Common::getSession()->settings_form->lat) && Common::getSession()->settings_form->lat!=''  ? Common::getSession()->settings_form->lat : 'null' ?>;
var settings_form_lng = <?php echo isset(Common::getSession()->settings_form->lng) && Common::getSession()->settings_form->lng!=''  ? Common::getSession()->settings_form->lng : 'null' ?>;


function initMap() {
  
  var mapDiv = document.getElementById('map');
      map = new google.maps.Map(mapDiv, {
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        zoomControl:true,
        scrollwheel: false
      });
      
  // autocomplete init + customization when hitting enter, the first result should be queried
  var ac_input = document.getElementById('place');
  autocomplete = new google.maps.places.Autocomplete(ac_input);
  autocomplete.bindTo('bounds', map);
  google.maps.event.addListener(autocomplete, 'place_changed', function() {
      updateMapByPlace(autocomplete.getPlace());
  });
  
  var position;
  
  // check if there is user defined latlng in input
  if (isNumber(settings_form_lat) && isNumber(settings_form_lng)){
    position = new google.maps.LatLng(settings_form_lat, settings_form_lng);  
    
    map.setCenter(position);
    map.setZoom(17);  
    
    marker = new google.maps.Marker({
      position: position,
      map: map
    });
  } else {
    position = new google.maps.LatLng('22.3964280', '114.1094970');
    map.setZoom(9);  
    map.setCenter(position);
  }
}

function updateMapByPlace(place){
    if(typeof marker == 'undefined'){
      marker = new google.maps.Marker({
        map: map
      });
    }
  
    marker.setVisible(false);
    
    if (!place.geometry) {
        //var content = [{'error' : 'Your input place was not found. please correct the input.'}] ;
        //showFlashMessages(content);
        // Inform the user that a place was not found and return.
        alert ("please ensure you have input the right location.")
        return false;
    }
        // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);  
    }

    marker.setPosition(place.geometry.location);
    marker.setVisible(true);
     
    jQuery('input[name="lat"]').val(place.geometry.location.lat());
    jQuery('input[name="lng"]').val(place.geometry.location.lng());

}

// trigger from the geolocate image button
function handleGeolocation(){
    // Try HTML5 geolocation
    if(navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var pos = new google.maps.LatLng(position.coords.latitude,
                                         position.coords.longitude);
        
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({'location': pos,'language':'<?php echo $language; ?>'}, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
              
              updateMapByPlace(results[0]);
              
              $('input[name="place"]').val(results[1].formatted_address);
              
            }
          }
        });
      }, handleGeolocationErrors);
    } else {
      // Browser doesn't support Geolocation
      alert('Your browser doesn\'t support Geolocation!');
    }
  
}
function handleGeolocationErrors(error)
{
    $('#feed-settings-page .location_settings').toggle();
    switch(error.code)
    {
        case error.PERMISSION_DENIED: alert("Please enable geo location function in your device and try again.");
        break;

        case error.POSITION_UNAVAILABLE: alert("Current position could not be detected.");
        break;

        case error.TIMEOUT: alert("Retrieving position timed out.");
        break;

        default: alert("Unknown error.");
        break;
    }
}


 function selectFirstResult() {
    $(".pac-container").hide();
    var firstResult = $(".pac-container .pac-item:first").text();
    
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({"address":firstResult }, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
              updateMapByPlace(results[0]);
              $('input[name="place"]').val(results[1].formatted_address);
            }
        }
    });   
 }

jQuery(function($){
    initMap();
    $('body')
      .on('click', '#geo_locate', function(){
        handleGeolocation();
        return false;
      })
      .keypress(function(e){
          if ( e.which == 13 ) return false;
      });    
    
    
    $("input#place")
      .focusin(function () {
          $(document).keypress(function (e) {
              if (e.which == 13) {
                   selectFirstResult();
              }
          });
      })
      .focusout(function () {
          if(!$(".pac-container").is(":focus") && !$(".pac-container").is(":visible"))
              selectFirstResult();
      });
    
    
});

</script>