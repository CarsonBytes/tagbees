<script type="text/javascript">
//common functions
// to check the size of asso. array
Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

(function($) {
  $.timeago = function(timestamp) {
    if (timestamp instanceof Date) {
      return inWords(timestamp);
    } else if (typeof timestamp === "string") {
      return inWords($.timeago.parse(timestamp));
    } else {
      return inWords($.timeago.datetime(timestamp));
    }
  };
  var $t = $.timeago;

  $.extend($.timeago, {
    settings: {
      refreshMillis: 60000,
      allowFuture: false,
      strings: {
        prefixAgo: null,
        prefixFromNow: null,
        suffixAgo: "<?php echo $this->translate(' ago')?>",
        suffixFromNow: "<?php echo $this->translate('from now')?>",
        seconds: "<?php echo $this->translate('just before')?>",
        minute: "<?php echo $this->translate('about a minute')?>",
        minutes: "<?php echo $this->translate('%d minutes')?>",
        hour: "<?php echo $this->translate('about an hour')?>",
        hours: "<?php echo $this->translate('about %d hours')?>",
        day: "<?php echo $this->translate('a day')?>",
        days: "<?php echo $this->translate('%d days')?>",
        month: "<?php echo $this->translate('about a month')?>",
        months: "<?php echo $this->translate('%d months')?>",
        year: "<?php echo $this->translate('about a year')?>",
        years: "<?php echo $this->translate('%d years')?>",
        numbers: []
      }
    },
    inWords: function(distanceMillis) {
        var $l = this.settings.strings;
        var prefix = $l.prefixAgo;
        var suffix = $l.suffixAgo;
        if (this.settings.allowFuture) {
          if (distanceMillis < 0) {
            prefix = $l.prefixFromNow;
            suffix = $l.suffixFromNow;
          }
        }

        var seconds = Math.abs(distanceMillis) / 1000;
        var minutes = seconds / 60;
        var hours = minutes / 60;
        var days = hours / 24;
        var years = days / 365;

        function substitute(stringOrFunction, number) {
          var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;
          var value = ($l.numbers && $l.numbers[number]) || number;
          return string.replace(/%d/i, value);
        }

        var words = seconds < 45 && substitute($l.seconds, Math.round(seconds)) ||
          seconds < 90 && substitute($l.minute, 1) ||
          minutes < 45 && substitute($l.minutes, Math.round(minutes)) ||
          minutes < 90 && substitute($l.hour, 1) ||
          hours < 24 && substitute($l.hours, Math.round(hours)) ||
          hours < 48 && substitute($l.day, 1) ||
          days < 30 && substitute($l.days, Math.floor(days)) ||
          days < 60 && substitute($l.month, 1) ||
          days < 365 && substitute($l.months, Math.floor(days / 30)) ||
          years < 2 && substitute($l.year, 1) ||
          substitute($l.years, Math.floor(years));

        return $.trim([prefix, words, suffix].join(""));
      },
      parse: function(iso8601) {
        var s = $.trim(iso8601);
        s = s.replace(/\.\d\d\d+/,""); // remove milliseconds
        s = s.replace(/-/,"/").replace(/-/,"/");
        s = s.replace(/T/," ").replace(/Z/," UTC");
        s = s.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"); // -04:00 -> -0400
        return new Date(s);
      },
      datetime: function(elem) {
        // jQuery's `is()` doesn't play well with HTML5 in IE
        var isTime = $(elem).get(0).tagName.toLowerCase() === "time"; // $(elem).is("time");
        var iso8601 = isTime ? $(elem).attr("datetime") : $(elem).attr("title");
        return $t.parse(iso8601);
      }
    });

    $.fn.timeago = function() {
      var self = this;
      self.each(refresh);

      var $s = $t.settings;
      if ($s.refreshMillis > 0) {
        setInterval(function() { self.each(refresh); }, $s.refreshMillis);
      }
      return self;
    };

    function refresh() {
      var data = prepareData(this);
      if (!isNaN(data.datetime)) {
        $(this).text(inWords(data.datetime));
      }
      return this;
    }

    function prepareData(element) {
      element = $(element);
      if (!element.data("timeago")) {
        element.data("timeago", { datetime: $t.datetime(element) });
        var text = $.trim(element.text());
        if (text.length > 0) {
          element.attr("title", text);
        }
      }
      return element.data("timeago");
    }

    function inWords(date) {
      return $t.inWords(distance(date));
    }

    function distance(date) {
      return (new Date().getTime() - date.getTime());
    }

    // fix for IE6 suckage
    document.createElement("abbr");
    document.createElement("time");
}(jQuery));


/*
 * array or list item suffle 
 * Example 1: shuffle an unordered list
    $('ul').shuffle();
    
    Example 2: shuffle an array
    var arr = [1,2,3,4,5,6];
    arr = $.shuffle(arr);
 */
(function($){
  $.fn.shuffle = function() {
    return this.each(function(){
      var items = $(this).children();
      return (items.length)
        ? $(this).html($.shuffle(items))
        : this;
    });
  }
 
  $.shuffle = function(arr) {
    for(
      var j, x, i = arr.length; i;
      j = parseInt(Math.random() * i),
      x = arr[--i], arr[i] = arr[j], arr[j] = x
    );
    return arr;
  }
})(jQuery);

//RETURN KEYS OF AN OBJECT
$.extend({
    keys: function(obj){
        var a = [];
        $.each(obj, function(k){ a.push(k) });
        return a;
    }
})

//from form data to object
$.fn.serializeObject = function()
{
  var o = {};
  var a = this.serializeArray();
  $.each(a, function() {
      if (o[this.name] !== undefined) {
          if (!o[this.name].push) {
              o[this.name] = [o[this.name]];
          }
          o[this.name].push(this.value || '');
      } else {
          o[this.name] = this.value || '';
        }
    });
    return o;
};

</script>