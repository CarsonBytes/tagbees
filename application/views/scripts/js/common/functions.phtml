<script type="text/javascript">

//common functions
// to check the size of asso. array
Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

function mysqlTimeStampToDate(timestamp) {
    //function parses mysql datetime string and returns javascript Date object
    //input has to be in this format: 2007-06-05 15:26:02
    var regex=/^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9]) (?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9]))?$/;
    var parts=timestamp.replace(regex,"$1 $2 $3 $4 $5 $6").split(' ');
    return new Date(parts[0],parts[1]-1,parts[2],parts[3],parts[4],parts[5]);
}

function scrollToAnchor(aid){
   var aTag = $("a[name='"+ aid.replace('#','') +"']");
   $('html,body').animate({scrollTop: aTag.offset().top},'slow');
}

function getURLParameterValue(name) {
    return decodeURI(
        (RegExp(name + '=' + '(.+?)(&|$)').exec(location.search)||[,''])[1]
    );
}

function showFlashMessages(content){
    //if (jQuery(".flash_message").is(':visible'))
    //  jQuery(".flash_message").hide();
    jQuery( "#flash_message_tmpl" ).tmpl( content ).appendTo( ".flash_messages" );
    jQuery(".flash_messages").fadeIn(300).delay(5000).fadeOut(300, function(){
       jQuery(this).empty();
    });
}
function getFlashMessageType(data){
    if (typeof data == 'object'){
        for (x in data){
            return x;
        }
    }
    return 'default';
}
function getFlashMessageHtml(data){
    if (typeof data == 'object'){
        for (x in data){
            return data[x];
        }
    }
    return data;
}

function hideMoreButton(more_flag, type, obj_selector){
    //var content = [{'error' : '<?php echo $this->translate('There is no more to load.')?>'}] ;
    //showFlashMessages(content);
    if (typeof more_flag == 'undefined') var more_flag=false;
    if (typeof type == 'undefined') var type = 'index';
    if (typeof obj_selector == 'undefined') var obj_selector = '.feeds_and_more .feeds';

    $(".load_more_feeds .more").hide();
    $(".load_more_feeds .loading").hide();
    var text = '';
    if (type == 'index'){
        text = '<p>No results. Please loosen the filters</p>';
    } else if ($type =='user_bookmarks'){
        text = '<p>That\'s all your bookmarks</p>';
    }
    if (more_flag) $(obj_selector).append(text);
    else $(obj_selector).html(text);
}

function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}


/*
 * array or list item suffle 
 * Example 1: shuffle an unordered list
    $('ul').shuffle();
    
    Example 2: shuffle an array
    var arr = [1,2,3,4,5,6];
    arr = $.shuffle(arr);
 */
(function($){
  $.fn.shuffle = function() {
    return this.each(function(){
      var items = $(this).children();
      return (items.length)
        ? $(this).html($.shuffle(items))
        : this;
    });
  }
 
  $.shuffle = function(arr) {
    for(
      var j, x, i = arr.length; i;
      j = parseInt(Math.random() * i),
      x = arr[--i], arr[i] = arr[j], arr[j] = x
    );
    return arr;
  }
})(jQuery);



function getNow () {
  var currentDate = new Date()
  var day = currentDate.getDate()
  var month = currentDate.getMonth() + 1
  var year = currentDate.getFullYear()
  var hours = currentDate.getHours()
  var minutes = currentDate.getMinutes()
  var seconds = currentDate.getSeconds()
    if (minutes < 10)  minutes = "0" + minutes
    if (seconds < 10)  seconds = "0" + seconds
   return year+ "-" + month + "-" + day  + " "+ hours + ":" + minutes +":" + seconds + " ";
}



function goToByScroll(id){
        $('html,body').animate({scrollTop: $("#"+id).offset().top},'slow');
}

/*
 * clone object by jQuery.extend (deep copy)
 * @param: source / 來源物件
 * @param: append / 附加的值 (非必要)
 */
function clone (source, append) {
  if ('undefined' !== typeof append) {
    var obj = jQuery.extend({}, source);
    return jQuery.extend(true, obj, append);
  } else {
    return jQuery.extend(true, {}, source);
  }
}
//RETURN KEYS OF AN OBJECT
$.extend({
    keys:    function(obj){
        var a = [];
        $.each(obj, function(k){ a.push(k) });
        return a;
    }
})
        
        
<?php //update variables from url parameters ?>
function updateVariablesFromUrlParams(){
    for (key in default_feed_para){
        var value = getURLParameterValue(key);
        if (isFeedParameterValid(key, value) && value != ""){
            feed_para[key] = value;
            updateUrlParam(key, value);
        } else {
            feed_para[key] = default_feed_para[key];
        }
    }
}

<?php //update feed option inputs from feed_para ?>
function updateFeedInputsFromVariables(){
    for (key in feed_para){
        if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
            if (feed_para[key] == 1) {
                jQuery('.feed_filter_input[name="'+key+'"]').prop('checked','checked');
            } else {
                jQuery('.feed_filter_input[name="'+key+'"]').removeProp('checked','checked');
            }
            if (key == 'is_show_map'){
                if (feed_para[key] == 1){
                   $('#map_wrapper').show();
                    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                        initMap();
                    <?php } ?>
                }
            }
        } else if (key == 'sort_by'){
            updateSortByInput(feed_para[key]);
        } else if (key == 'q') { 
        } else if (key == 'radius') {
            $('.feed_filter_input[name="'+key+'"]').val(feed_para[key]);
            $('#filter_radius').text(feed_para[key]);
        } else if (key == 'begin_date' || key == 'end_date') {
            $('.feed_filter_input[name="'+key+'"]').datepicker("setDate", feed_para[key] );
        }
    }
    if (feed_para['is_match_location']==1){
        jQuery('.match_location_set').show();
    } else {
        jQuery('.match_location_set').hide();
    }

    if ( !("is_all_time" in feed_para) ||  feed_para['is_all_time']==1){
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').prop('disabled','disabled');
    } else {
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').removeProp('disabled');
    }
}
function isFeedParameterValid(key, value){
    if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
        if (value == "") return false;
            if (value == 1 || value == 0) return true;
    } else if (key == 'sort_by'){
        if (value == "") return false;
        if (value == 2 || value == 1 || value == 0) return true;
    } else if (key == 'q') {
         return true;
    } else if (key == 'radius' || key == 'lat' || key == 'lng') {
        if (isNumber(value) || value == "") return true;
    } else if (key == 'begin_date' || key == 'end_date') {
        if (value == "") return true;
        var regex = /^\d{4}-\d{1,2}-\d{1,2}$/gm;
        if (regex.test(value)) return true;
    }
    return false;
}

function navigateToUrl(url) {
    var f = document.createElement("FORM");
    f.action = url;

    var indexQM = url.indexOf("?");
    if (indexQM>=0) {
        // the URL has parameters => convert them to hidden form inputs
        var params = url.substring(indexQM+1).split("&");
        for (var i=0; i<params.length; i++) {
            var keyValuePair = params[i].split("=");
            var input = document.createElement("INPUT");
            input.type="hidden";
            input.name  = keyValuePair[0];
            input.value = keyValuePair[1];
            f.appendChild(input);
        }
    }

    document.body.appendChild(f);
    f.submit();
}

//from form data to object
$.fn.serializeObject = function()
{
  var o = {};
  var a = this.serializeArray();
  $.each(a, function() {
      if (o[this.name] !== undefined) {
          if (!o[this.name].push) {
              o[this.name] = [o[this.name]];
          }
          o[this.name].push(this.value || '');
      } else {
          o[this.name] = this.value || '';
        }
    });
    return o;
};

function saveFormToCookie(form_id){
  console.log('saveFormCookie')
  var form_data =  $.extend(form_data,$('#'+form_id).serializeObject());
  console.log(form_data);
  console.log(JSON.stringify(form_data));
  $.cookie(form_id, JSON.stringify(form_data), {path: '/'});
}
function loadCookieToForm(form_id){
  if ($.cookie(form_id) != '' && $.cookie(form_id) != null){
    console.log($.cookie(form_id))
    var form_data = JSON.parse($.cookie(form_id));

    $('#'+form_id).find('input, textarea').each(function(){
        if ($(this).prop('name').length && $(this).prop('name') in form_data){
          if (form_data[$(this).prop('name')]!=''){
        console.log($(this))
        console.log($(this).prop('value'))
            //if checkbox 
            if ($(this).is(':checkbox')){
              $(this).prop('checked','checked');
            //if text input
            }else if ($(this).prop('value')==''){
        console.log($(this))
              
              $(this).val(form_data[$(this).prop('name')]);
            }
          }
        }
    });
  }
}
  
</script>