<script type="text/javascript">
<?php //var bounds; ?>

var markersArray = [];
var map;
var distanceWidget;
var geocodeTimer;
var profileMarkers = [];
var home_icon='<?php echo $this->baseUrl('images/map/home.png')?>';
var infoWindow;
var autocomplete;
// autocomplete init + customization when hitting enter, the first result should be queried
jQuery(function($){
    var pac_input = document.getElementById('locate_somewhere');
    autocomplete = new google.maps.places.Autocomplete(pac_input);
    autocomplete.bindTo('bounds', map);
    google.maps.event.addListener(autocomplete, 'place_changed', function() {
        ns_filter_map.updateFilterMapByPlace(autocomplete.getPlace());
    });
    (function pacSelectFirst(input) {
        // store the original event binding function
        var _addEventListener = (input.addEventListener) ? input.addEventListener : input.attachEvent;
    
        function addEventListenerWrapper(type, listener) {
            // Simulate a 'down arrow' keypress on hitting 'return' when no pac suggestion is selected,
            // and then trigger the original listener.
            if (type == "keydown") {
                var orig_listener = listener;
                listener = function(event) {
                    var suggestion_selected = $(".pac-item.pac-selected").length > 0;
                    if (event.which == 13 && !suggestion_selected) {
                        var simulated_downarrow = $.Event("keydown", {
                            keyCode: 40,
                            which: 40
                        });
                        orig_listener.apply(input, [simulated_downarrow]);
                    }
    
                    orig_listener.apply(input, [event]);
                };
            }
    
            _addEventListener.apply(input, [type, listener]);
        }
    
        input.addEventListener = addEventListenerWrapper;
        input.attachEvent = addEventListenerWrapper;
    
        var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);
    
    })(pac_input);
});

var ns_filter_map = {
  initMap: function() {
    var mapDiv = document.getElementById('feed_filter_map');
        map = new google.maps.Map(mapDiv, {
          center: new google.maps.LatLng(ns_feeds.feed_para['place_lat'], ns_feeds.feed_para['place_lng']),
          zoom: 8,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          zoomControl:true,
          scrollwheel: false
        });
            
      if (ns_feeds.feed_para['is_match_location'] == 1) {
        ns_filter_map.initDistanceWidget();
        ns_filter_map.loadPosition(ns_feeds.feed_para['place_lat'],ns_feeds.feed_para['place_lng']);
        
        ns_filter_map.initSlider();
        ns_filter_map.loadRadius(ns_feeds.feed_para['radius']);
      }
  
      if (ns_feeds.feed_para['is_match_location'] == 1) { 
          ns_filter_map.reverseGeocodePosition();
          map.fitBounds(distanceWidget.get('bounds'));
          updateRadiusFromMapDistance() ;
      }
    
    infoWindow = new google.maps.InfoWindow({
      maxWidth: 500
    });
    
  <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
    ns_filter_map.refreshMarkers();
  <?php } ?>
  },
  fixInfoWindow: function() {
      //Here we redefine set() method.
      //If it is called for map option, we hide InfoWindow, if "noSupress" option isnt true.
      //As Google doesn't know about this option, its InfoWindows will not be opened.
      var set = google.maps.InfoWindow.prototype.set;
      google.maps.InfoWindow.prototype.set = function (key, val) {
          if (key === 'map') {
              if (!this.get('noSupress')) {
                  console.log('This InfoWindow is supressed. To enable it, set "noSupress" option to true');
                  return;
              }
          }
          set.apply(this, arguments);
      }
  },
  multiChoice: function(clickedCluster){
    if (clickedCluster.getMarkers().length > 1)
    {
      var markerArray =clickedCluster.getMarkers();
      ;
      console.log(markerArray);
      this.fixInfoWindow();
      infoWindow = new google.maps.InfoWindow({
        maxWidth: 300,
        noSupress: true
      });
      
      jQuery( "#group-info-window-tmpl" ).tmpl( markerArray ).appendTo('#info-window');
      jQuery( "#info-window" ).prepend('<a href="#" class="previous">previous</a> <a href="#" class="next">next</a>');
      infoWindow.setContent(jQuery( "#info-window" ).html());
      infoWindow.setPosition(clickedCluster.getCenter());
      infoWindow.open(map);
      // var markers = clickedCluster.getMarkers();
      // do something creative!
      return false;
    }
    return true;
  },
  refreshMarkers: function() {
    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
        ns_filter_map.deleteOverlays();
        ns_filter_map.addMarker(ns_feeds.map_markers_data);
    <?php } ?>
  },
  removeMarkers: function() {
    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
        ns_filter_map.deleteOverlays();
    <?php } ?>
  },
  addMarker: function(json) {
    var location, marker, data_array, x;
    infoWindow = new google.maps.InfoWindow({
      maxWidth: 500
    });
    //console.log(json)
    for (x in json){
      data_array = [];
      if (typeof json[x].place_lat != 'undefined' && typeof json[x].place_lng != 'undefined'){
          data_array.push(json[x]);
          jQuery( "#info-window-tmpl" ).tmpl( data_array ).appendTo('#info-window');
          location = new google.maps.LatLng(json[x].place_lat,json[x].place_lng);
          marker = new google.maps.Marker({
              position: location,
              map: map,
              html: jQuery( "#info-window" ).html(),
              id: json[x].id
          });
          jQuery( "#info-window" ).empty();
          
          google.maps.event.addListener(marker, 'click', function() {
              infoWindow.setContent(this.html);
              //infoWindow.setOptions({maxWidth:900});
              infoWindow.open(map, this);
          });
          
          markersArray.push(marker);
      }
    }
    markerCluster = new MarkerClusterer(map, markersArray);
    // onClickZoom OVERRIDE
    markerCluster.onClick = function(clickedClusterIcon) { 
      return ns_filter_map.multiChoice(clickedClusterIcon.cluster_); 
    }
  },
  addMarkers: function() {
    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
        ns_filter_map.addMarker(ns_feeds.map_markers_data);
    <?php } ?>
  },
  initDistanceWidget: function() {
    distanceWidget = new DistanceWidget({
      map: map,
      distance: ns_feeds.feed_para['radius'], // Starting distance in km.
      maxDistance: maxDistance, //Carson
      minDistance: minDistance, //Carson
      color: '#000000',
      activeColor: '#5599bb',
      sizerIcon: new google.maps.MarkerImage('<?php echo $this->baseUrl('images/map/resize-off.png') ?>'),
      activeSizerIcon: new google.maps.MarkerImage('<?php echo $this->baseUrl('images/map/resize.png') ?>')
    });
  },
  initSlider: function(){
    $( "#radius_slider" ).slider({
        range: "min",
        //value:ns_feeds.feed_para['radius'],
        step: 0.01,
        min: minDistance,
        max: maxDistance,
        slide: function( event, ui ) {
            $( ".radius_amt span#filter_radius" ).text( ui.value );
        },
        change: function( event, ui ) {
            $( ".radius_amt span#filter_radius" ).text( ui.value );
            if ($("#feed_filter_map").is(":visible")){
                distanceWidget.set('distance',ui.value);
                radiusWidget.bindTo('center', distanceWidget, 'position');
                map.fitBounds(radiusWidget.get('bounds'));
            }
          ns_feeds.feed_para['radius'] = ui.value;
          ns_feeds.updateUrlParam('radius', ns_feeds.feed_para['radius']);
          ns_feeds.updateUrlParam('place_lat', ns_feeds.feed_para['place_lat']);
          ns_feeds.updateUrlParam('place_lng', ns_feeds.feed_para['place_lng']);
          ns_feeds.refresh();
        }
    });
  },
  setGeocodeTriggerTimer: function() {
    if (geocodeTimer) {
      window.clearTimeout(geocodeTimer);
    }
  
    // Throttle the geo query so we don't hit the limit
    geocodeTimer = window.setTimeout(function() {
      ns_filter_map.reverseGeocodePosition();
    }, 200);
  },
  loadPosition: function(place_lat, place_lng) {
    ns_filter_map.setGeocodeTriggerTimer();
    
    // Carson
    ns_feeds.refresh(); //done in ns_filter_map.loadRadius event
    distanceWidget.set('position',new google.maps.LatLng(place_lat, place_lng));
    map.fitBounds(radiusWidget.get('bounds'));
  },
  reverseGeocodePosition: function() {
    var pos = distanceWidget.get('position');
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({'location': pos,'language':'<?php echo Common::getSiteDisplayLang(); ?>'}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        if (results[1]) {
          $('#of').html(results[1].formatted_address);
          return;
        }
      }
  
      $('#of').html('somewhere');
    });
  },
  deleteOverlays: function() {
    if (markersArray) {
      for (i in markersArray) {
        markersArray[i].setMap(null);
      }
      markersArray.length = 0;
    }
  },
  <?php /*//place auto complete
  selectFirstResult: function() {
    var firstResult = $(".pac-container .pac-item:first").text();
        $("#locate_somewhere").val(firstResult);
        ns_filter_map.updateFilterMapByPlace(autocomplete.getPlace());
  },
   */?>
  // para should be google api's geometry.location object
  updateFilterMapByPlace: function(place){
    if (!place.geometry) {
        //var content = [{'error' : 'Your input place was not found. please correct the input.'}] ;
        //ns_common_foot.showFlashMessages(content);
        // Inform the user that a place was not found and return.
        return false;
    }
    if (ns_feeds.feed_para['is_match_location'] == 1) { 
        if (typeof distanceWidget == 'undefined') ns_filter_map.initDistanceWidget();
        distanceWidget.set('position',place.geometry.location);
    }
    updatePositionByDraggingMarker();
    if (ns_feeds.feed_para['is_match_location'] == 1) { 
        map.fitBounds(distanceWidget.get('bounds'));
    }
  },
  handleGeolocationQuery: function(position){
    if (ns_feeds.feed_para['is_show_map']==0){
        jQuery('#map_wrapper').toggle(0);
        ns_filter_map.initMap();
        ns_feeds.feed_para['is_show_map']=1;
        $('.feed_filter_input[name="is_show_map"]').text('<?php echo $this->translate('hide map') ?>');
    }
    ns_feeds.feed_para['place_lat']=position.coords.latitude;
    ns_feeds.feed_para['place_lng']=position.coords.longitude;
    ns_feeds.updateUrlParam('place_lat',ns_feeds.feed_para['place_lat']);
    ns_feeds.updateUrlParam('place_lng',ns_feeds.feed_para['place_lng']);
    ns_filter_map.loadPosition(ns_feeds.feed_para['place_lat'], ns_feeds.feed_para['place_lng']);
    jQuery(ns_filter.elem_saved_location_list_txt).val("last");
    jQuery(ns_filter.elem_saved_location_list_txt).trigger('chosen:updated');
  },
  handleErrors: function(error){
      $('#feed-settings-page .location_settings').toggle();
      switch(error.code)
      {
          case error.PERMISSION_DENIED: alert("Please enable geo location function in your device and try again.");
          break;
  
          case error.POSITION_UNAVAILABLE: alert("Current position could not be detected.");
          break;
  
          case error.TIMEOUT: alert("Retrieving position timed out.");
          break;
  
          default: alert("Unknown error.");
          break;
      }
  },
  loadRadius: function(value) {
    $( "#radius_slider" ).slider( "option", "value", Number(value).toFixed(2) );
  }
}

jQuery(function($){
    if ($('.stream').length && typeof page_type !='undefined')
        ns_filter_map.initMap();
})

// this can only be out of namespace since google cloud js uses it...
function updatePositionByDraggingMarker() {
  ns_filter_map.setGeocodeTriggerTimer();
  
  // Carson
  ns_feeds.feed_para['place_lat']=distanceWidget.get('position').lat();
  ns_feeds.feed_para['place_lng']=distanceWidget.get('position').lng();
  ns_feeds.updateUrlParam('place_lat',ns_feeds.feed_para['place_lat']);
  ns_feeds.updateUrlParam('place_lng',ns_feeds.feed_para['place_lng']);
  ns_feeds.refresh();
  jQuery(ns_filter.elem_saved_location_list_txt).val("last");
  jQuery(ns_filter.elem_saved_location_list_txt).trigger('chosen:updated');
  
  //map.fitBounds(radiusWidget.get('bounds'));
}

function updateRadiusFromMapDistance() {
  var distance = distanceWidget.get('distance');
  var new_radius = Number(distance.toString().match(/^\d+(?:\.\d{0,2})?/));
  if (ns_feeds.feed_para['radius'] != new_radius){
      ns_feeds.feed_para['radius']=Number(distance.toString().match(/^\d+(?:\.\d{0,2})?/));
      ns_filter_map.loadRadius(ns_feeds.feed_para['radius']);
  }
}
<?php /*
var merged;
function getEventThumbnailUrl(data){
    merged = jQuery.merge(data.images['main'], data.images['general']);
    if (!jQuery.isEmptyObject(merged)){
        var x;
        for (x in merged){
            if (typeof merged[x]['url'] == 'string' && merged[x]['url'] != ''){
                return merged[x]['url'];
            } 
        }
    }
    return '<?php //echo Common::getUploadedImageUrl(NULL, 'event_default_pic'); ?>';
}*/?>
</script>
<script id="info-window-tmpl" type="text/x-jquery-tmpl">
        <?php //<img src="${getEventThumbnailUrl($data)}" width="100" style="float:left;margin:5px;" /> ?>
        <h1>${name}</h1>
        <p>${teaser}</p>
        <button onclick="jQuery('.Post').css('background','none');jQuery('#item_${id}').css('background','#E8FFF7');ns_common_foot.goToByScroll('article[data-id=\'${id}\']');">go to the feed</button>
</script>
<script id="group-info-window-tmpl" type="text/x-jquery-tmpl">
    <div class="content">{{html html}}</div>
</script>
<div id="info-window" style="display:none;"></div>