<script type="text/javascript">
    function renderIndexFeeds(index_feeds, more_flag){
        if (typeof more_flag == 'undefined') var more_flag=false;
        if (typeof data == 'undefined') var index_feeds = index_feeds;
        
        var feeds_html = generateIndexFeeds(index_feeds);
        
        if (more_flag) feeds_html.appendTo( ".feeds_and_more .feeds");
        else $(".feeds_and_more .feeds").html(feeds_html);
        
        //decide if number of feeds is less than expected plus it's not a 'more' action, then the more button is not needed
        if (feeds_html.length == 0 <?php //echo Zend_Registry::get('config')->filter->user_para->rpp ?>){
            hideMoreButton(more_flag);
        }else{
            $('.load_more_feeds .loading').hide();
            $('.load_more_feeds .more').show();
        }
        
        attachIndexFeedEvents();
    }
    function generateIndexFeeds(index_feeds){
        return $( "#feed_index_item" ).tmpl(index_feeds.data,
              {
                  getMainPicTitle: function(){
                      var img_is_main_pics =this.data.img_is_main_pics.split(',');
                      var img_descriptions =this.data.img_descriptions.split(',');
                      for( index in img_is_main_pics){
                          if (img_is_main_pics[index] == 1){
                              return img_descriptions[index];
                          }
                      }
                  },
                  getMainPicURL: function(){
                      var img_is_main_pics =this.data.img_is_main_pics.split(',');
                      var img_filenames =this.data.img_filenames.split(',');
                      for( index in img_is_main_pics){
                          if (img_is_main_pics[index] == 1){
                              return '<?php echo $this->baseUrl('uploads');?>/'+img_filenames[index];
                          }
                      }
                      return '<?php echo Common::changePathToURL(Common::config()->pics->event->public);?>';
                  },
                  hasMainCat: function(){
                      return !(jQuery.isEmptyObject(this.data.tree_ids.main));
                  },
                  getMainCatName: function(){
                      var main_cat_ids = this.data.tree_ids.main;
                      var keys = $.keys(main_cat_ids);
                      return index_feeds.tree_tags[main_cat_ids[keys[keys.length-1]]]['name'];
                  },
                  getMainCatURL: function(){
                      var main_cat_ids = this.data.tree_ids.main;
                      var url = [];
                      for (index in main_cat_ids){
                        if (typeof index_feeds.tree_tags[main_cat_ids[index]] != 'undefined'){
                            url.push(index_feeds.tree_tags[main_cat_ids[index]]['slug_name']);
                        }else {
                            //unknown error: index_feeds.tree_tags[main_cat_ids[index]] can be undefined...
                            alert('Error occured, please refresh the page.');
                            return '';
                        }
                      }
                      url = url.join('/');
                      return '<?php echo $this->baseUrl('tree');?>/'+url;
                  },
                  urldecode: function() {
                     //console.log(this.data);
                    if (typeof arguments[0] == 'string') 
                        return decodeURIComponent((arguments[0]+'').replace(/\+/g, '%20')).replace('\n','<br />');
                    else return '';
                  },
                  formatMysqlDate: function() { 
                      if (typeof arguments[0] == 'string') 
                        return $.datepicker.formatDate('dd M yy', mysqlTimeStampToDate(arguments[0]));
                  },
                  tagHTML: function() {
                      var tag_slug_names =this.data.tag_slug_names.split(',');
                      var tag_names =this.data.tag_names.split(',');
                      var tag_types =this.data.tag_types.split(',');
                      var html = [];
                      for( index in tag_slug_names){
                        if (tag_names[index]!='' && tag_slug_names[index]!='' && tag_slug_names[index]!='')
                            html.push('<a href="<?php echo $this->baseUrl();?>/'+tag_types[index]+'/'+tag_slug_names[index]+'">'+tag_names[index]+'</a>');
                      }
                      return html.join(', ');
                  }
              } 
        );
    }
    function attachIndexFeedEvents(){
        $("abbr.timeago").timeago();
        
        
        $(".tag_top a.place").qtip({
            content: {
                text: '<div style="text-align:center"><img class="throbber" src="<?php echo $this->baseUrl('images/throbber.gif')?>" alt="Loading..." /></div>'
            },
            position: {
                my: 'top left',
                at: 'bottom right', // Stick it at the top left of our element
                viewport: $(window), // Keep it within the window boundaries...
                adjust: { method: 'shift' } // ...by shifting it, not flipping as is default!
            },
            show: 'click', // Show on click
            hide: 'unfocus', // Hide it when the element loses focus
            style: {
                classes: 'qtip-googlemap qtip-shadow',
                width: 200 // Keep the tooltip a set width.. in our case 200px!
            },
            events: {
                render : function(event, api)
                {
                    var tooltip = $(this),
     
                    // Setup the map container and append it to the tooltip
                    container = $('<div style="width:200px; height:200px;"></div>')
                        .appendTo(api.elements.content.empty());
                        
     
                    // Temporarily show the tooltip so we don't get rendering bugs in GMaps
                    tooltip.show();
     
                    // Create map object as api attribute for later use
                    api.map = new google.maps.Map(container[0], {
                        zoom: 12, // Close zoom!
                        mapTypeId: google.maps.MapTypeId.ROADMAP // Use the classic roadmap
                    });
     
                    // Hide the tooltip again now we're done
                    tooltip.hide();
                },
                show: function(event, api)
                {
                    // Grab the map reference and target
                    var map = api.map,
                        target = api.elements.target,
                        coords, latlong, map, marker, info;
                    
                    // Parse coordinates of event target
                    coords = target.attr('data-coord').split(',');
     
                    // Setup lat/long coordinates
                    latlong = new google.maps.LatLng(parseFloat(coords[0]), parseFloat(coords[1]));
     
                    // Create marker at the new location and center map there
                    marker = new google.maps.Marker({
                        position: latlong,
                        map: map,
                        title: target.attr('alt') // Use the alt attribute of the target for the marker title
                    });
                    map.setCenter(latlong);
                }
            }
        })
        .dotdotdot({
                wrap : 'word',
                height: 16
        });
        
        $(".post_right p").dotdotdot({
                wrap : 'letter',
                height: 80
        });
        
        $(".direction-arrow").each( function(){
            var direction=$(this).attr('class').replace('direction-arrow ','');
            if (direction!=''){
                $(this).css('display','inline-block');
                $(this).rotate(parseInt(direction));
            }else{
                //$(this).css('display','none');
            }
        })
    }
    

    function initIndexFeed(){ 
        updateVariablesFromUrlParams();
        updateFeedInputsFromVariables();
        
        <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
            initMap();
        <?php } ?>
        
        $( "#radius_slider" ).slider({
            range: "min",
            value:feed_para['radius'],
            step: 0.01,
            min: minDistance,
            max: maxDistance,
            slide: function( event, ui ) {
                $( ".radius_amt span#filter_radius" ).text( ui.value );
                
            },
            change: function( event, ui ) {
                $( ".radius_amt span#filter_radius" ).text( ui.value );
                if ($("#map").is(":visible")){
                    distanceWidget.set('distance',ui.value);
                    radiusWidget.bindTo('center', distanceWidget, 'position');
                    map.fitBounds(radiusWidget.get('bounds'));
                }
              feed_para['radius'] = ui.value;
              updateUrlParam('radius', ui.value);
            }
        });
    }

    
    jQuery(function($){
        //when user clicks load more
        $('body#index').on("click",'.load_more_feeds',function() {
            feed_para.last_id = $('.feeds > article:last').data("id");
            refreshFeed('index', true);
            return false;
        });
    })
</script>
<?php echo $this->partial('js/feeds.phtml') ?>
<?php echo $this->partial('js/template/page/index_events_item.phtml') ?>