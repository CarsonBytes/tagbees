<script type="text/javascript">
var feed_refreshing = false;

function addChangedFeedInputName(element){
    if ($.inArray(element.prop('name'),changed_feed_input_names) == -1)changed_feed_input_names.push(element.prop('name'));
}

function validateSidebarSearchInputs(){
    if (feed_search_form.form()){
        return true;
    } else {
        var content = [{'error' : 'please correct the input first before searching.'}] ;
        showFlashMessages(content);
        return false;
    }
}

function refreshFeed(type, more_flag, para, is_refresh_markers){
    if(typeof type == 'undefined') var type = 'index';
    if(typeof more_flag == 'undefined') var more_flag = false;
    if(typeof para == 'undefined') var para = [];
    if(typeof is_refresh_markers == 'undefined') var is_refresh_markers = true;
    
    if (type == 'index'){
        if ( !more_flag ){
            $.address.update();
            feed_para.last_id = null;
        }
        if (para != []) para = feed_para;
    } 
    
    para['type'] = type;
    
    
    if(!feed_refreshing){
        $('.loading.feed').show();
        feed_refreshing = true;
        jQuery.ajax({
                url: "<?php echo $this->baseUrl('ajax/feed/refresh') ?>",
                data: para,
                beforeSend:  function() {
                    if (more_flag) {
                        $(".load_more_feeds .loading").show();
                        $(".load_more_feeds .more").hide();
                    }
                },
                success: function(response){
                    if ($.isEmptyObject(response.data)){
                        hideMoreButton(more_flag);
                        removeMarkers();
                    } else {
                        if (type == 'index') {
                            <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                                map_markers_data = response.data;
                                if (is_refresh_markers) 
                                  refreshMarkers();
                                else addMarkers();
                            <?php } ?>
                            ns_feed.render(response, more_flag);
                        } else if (type == 'user_log'){
                            renderUserLogs(response, more_flag);
                        } else if ((type == 'tree_feeds')|| (type == 'tag_events')){
                            //renderTreeFeeds(response, more_flag);
                            ns_feed.render(response, more_flag);
                        }
                    }
                    feed_refreshing = false;
                    $('.loading.feed').hide();
                    return true;
                }
        });
    };
}

<?php // update url parameters from feed_para ?>
function updateUrlParam(key,value, to_be_updated){
    if (!to_be_updated) var to_be_updated = false;
    if (value === false){
        $.address.parameter(key, false);
    } else {
        $.address.parameter(key, encodeURIComponent(value));
    }
    if (to_be_updated) {
        $.address.update();
    }
}

function updateVariableAndUrlParamFromFeedInput(element){
    if (element.is('.feed_filter_input[name="is_match_interest"]') || element.is('.feed_filter_input[name="is_match_location"]') || element.is('.feed_filter_input[name="is_all_time"]')){
        var value = element.is(':checked') ? 1 : 0;
        feed_para[element.prop('name')] = value;
        updateUrlParam(element.prop('name'), value);
        if (element.is('.feed_filter_input[name="is_all_time"]')){
            updateUrlParam('is_all_time', value);
            if (value == 1){
                feed_para['begin_date'] = null;
                feed_para['end_date'] = null;
                updateUrlParam('begin_date', false);
                updateUrlParam('end_date', false);
            } else{
                feed_para['begin_date'] = $('.feed_filter_input[name="begin_date"]').val();
                feed_para['end_date'] = $('.feed_filter_input[name="end_date"]').val();
                updateUrlParam('begin_date', $('.feed_filter_input[name="begin_date"]').val());
                updateUrlParam('end_date', $('.feed_filter_input[name="end_date"]').val());
            }
        }
    } else if (element.is('.feed_filter_input[name="sort_by"]') || element.is('.feed_filter_input[name="q"]') || element.is('.feed_filter_input[name="begin_date"]') || element.is('.feed_filter_input[name="end_date"]')){
        feed_para[element.prop('name')] = element.val();
        updateUrlParam(element.prop('name'), element.val());
    } else if (element.is('.feed_filter_input[name="is_show_map"]')){ // this doesn't load the feed again so url needs to update instantly
        feed_para[element.prop('name')] = element.val();
        updateUrlParam(element.prop('name'), element.val(), true);
        
    }
}

jQuery(function($){
    $.address.autoUpdate(false);
    if ($('.feeds.index').length) initIndexFeed();
    $('body#index')
        <?php // event that the submit button is needed to be clicked before searching, e.g. search field ?>
        .on('change keyup', '#feed_search input[name="q"], #feed_search input[name="is_all_time"], #feed_search input[name="begin_date"], #feed_search input[name="end_date"]', function(){
            addChangedFeedInputName($(this));
        })
        .on('click', '#feed_search input[type="submit"]', function(e){
            e.preventDefault();
            if (feed_refreshing) return false;
            if (validateSidebarSearchInputs()){
                for( key in changed_feed_input_names){
                    updateVariableAndUrlParamFromFeedInput($('*[name="'+changed_feed_input_names[key]+'"]'));
                }
            }
            refreshFeed('index');
        });
       
});
</script>