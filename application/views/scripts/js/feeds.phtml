<script type="text/javascript">
var ns_feed = {
  render: function(data_arr, more_flag, template_id){
    if (typeof more_flag == 'undefined') var more_flag=false;
    if (typeof template_id == 'undefined') var template_id = 'feed_index_item';
      console.log(data_arr.data);
      var feeds_html = ns_feed.getHTML(data_arr, template_id);
      console.log(feeds_html);
      
      if (more_flag) feeds_html.appendTo( ".feeds_and_more .feeds");
      else $(".feeds_and_more .feeds").html(feeds_html);
      
      //decide if number of feeds is less than expected plus it's not a 'more' action, then the more button is not needed
      if (feeds_html.length == 0 <?php //echo Zend_Registry::get('config')->filter->user_para->rpp ?>){
          hideMoreButton(more_flag);
      }else{
          $('.load_more_feeds .loading').hide();
          $('.load_more_feeds .more').show();
      }
      
      ns_feed.attachEvents();
  },
  getHTML: function(data_arr, template_id){
    if (typeof template_id == 'undefined') var template_id = 'feed_index_item';
    return $( "#"+template_id ).tmpl(data_arr.data,
    {
        getMainPicTitle: function(){
            var img_is_main_pics =this.data.img_is_main_pics.split(',');
            var img_descriptions =this.data.img_descriptions.split(',');
            for( index in img_is_main_pics){
                if (img_is_main_pics[index] == 1){
                    return img_descriptions[index];
                }
            }
        },
        getMainPicURL: function(){
            var img_is_main_pics =this.data.img_is_main_pics.split(',');
            var img_filenames =this.data.img_filenames.split(',');
            for( index in img_is_main_pics){
                if (img_is_main_pics[index] == 1){
                    return '<?php echo $this->baseUrl('uploads');?>/'+img_filenames[index];
                }
            }
            return '<?php echo Common::changePathToURL(Common::config()->pics->event->public);?>';
        },
        hasMainCat: function(){
            return !(jQuery.isEmptyObject(this.data.tree_ids.main));
        },
        getMainCatName: function(){
            var main_cat_ids = this.data.tree_ids.main;
            var keys = $.keys(main_cat_ids);
            return data_arr.tree_tags[main_cat_ids[keys[keys.length-1]]]['name'];
        },
        getMainCatURL: function(){
            var main_cat_ids = this.data.tree_ids.main;
            var url = [];
            for (index in main_cat_ids){
              if (typeof data_arr.tree_tags[main_cat_ids[index]] != 'undefined'){
                  url.push(data_arr.tree_tags[main_cat_ids[index]]['slug_name']);
              }else {
                  //unknown error: data_arr.tree_tags[main_cat_ids[index]] can be undefined...
                  alert('Error occured, please refresh the page.');
                  return '';
              }
            }
            url = url.join('/');
            return '<?php echo $this->baseUrl('tree');?>/'+url;
        },
        urldecode: function() {
           //console.log(this.data);
          if (typeof arguments[0] == 'string') 
              return decodeURIComponent((arguments[0]+'').replace(/\+/g, '%20')).replace('\n','<br />');
              //return $("<div/>").html(arguments[0]).text();
          else return '';
        },
        formatMysqlDate: function() { 
            if (typeof arguments[0] == 'string') 
              return $.datepicker.formatDate('dd M yy', mysqlTimeStampToDate(arguments[0]));
        },
        tagHTML: function() {
            var tag_slug_names =this.data.tag_slug_names.split(',');
            var tag_names =this.data.tag_names.split(',');
            var tag_types =this.data.tag_types.split(',');
            var html = [];
            for( index in tag_slug_names){
              if (tag_names[index]!='' && tag_slug_names[index]!='' && tag_slug_names[index]!='')
                  html.push('<a href="<?php echo $this->baseUrl();?>/'+tag_types[index]+'/'+tag_slug_names[index]+'">'+tag_names[index]+'</a>');
            }
            return html.join(', ');
          }
        } 
    );
  },
  attachEvents: function(){
    
    $("abbr.timeago").timeago();
    
    $(".tag_top a.place").qtip({
        content: {
            text: '<div style="text-align:center"><img class="throbber" src="<?php echo $this->baseUrl('images/throbber.gif')?>" alt="Loading..." /></div>'
        },
        position: {
            my: 'top left',
            at: 'bottom right', // Stick it at the top left of our element
            viewport: $(window), // Keep it within the window boundaries...
            adjust: { method: 'shift' } // ...by shifting it, not flipping as is default!
        },
        show: 'click', // Show on click
        hide: 'unfocus', // Hide it when the element loses focus
        style: {
            classes: 'qtip-googlemap qtip-shadow',
            width: 200 // Keep the tooltip a set width.. in our case 200px!
          },
          events: {
              render : function(event, api)
              {
                  var tooltip = $(this),
   
                  // Setup the map container and append it to the tooltip
                container = $('<div style="width:200px; height:200px;"></div>')
                      .appendTo(api.elements.content.empty());
                      
   
                  // Temporarily show the tooltip so we don't get rendering bugs in GMaps
                  tooltip.show();
   
                  // Create map object as api attribute for later use
                api.map = new google.maps.Map(container[0], {
                    zoom: 12, // Close zoom!
                    mapTypeId: google.maps.MapTypeId.ROADMAP // Use the classic roadmap
                  });
   
                  // Hide the tooltip again now we're done
                tooltip.hide();
            },
            show: function(event, api)
            {
                // Grab the map reference and target
                var map = api.map,
                    target = api.elements.target,
                    coords, latlong, map, marker, info;
                
                // Parse coordinates of event target
                coords = target.attr('data-coord').split(',');
   
                  // Setup place_lat/long coordinates
                  latlong = new google.maps.LatLng(parseFloat(coords[0]), parseFloat(coords[1]));
   
                  // Create marker at the new location and center map there
                marker = new google.maps.Marker({
                    position: latlong,
                    map: map,
                    title: target.attr('alt') // Use the alt attribute of the target for the marker title
                });
                map.setCenter(latlong);
            }
        }
    })
    /*.dotdotdot({
            wrap : 'word',
            height: 16
    });*/
    
    $(".post_right div.content").dotdotdot({
            wrap : 'letter',
            height: 80
    });
    
    $(".direction-arrow").each( function(){
        var direction=$(this).attr('class').replace('direction-arrow ','');
        if (direction!=''){
            $(this).css('display','inline-block');
            $(this).rotate(parseInt(direction));
        }else{
            //$(this).css('display','none');
        }
    })
  }
  
}

var feed_refreshing = false;

function addChangedFeedInputName(element){
    if ($.inArray(element.prop('name'),changed_feed_input_names) == -1)changed_feed_input_names.push(element.prop('name'));
}

function validateSidebarSearchInputs(){
    if (feed_search_form.form()){
        return true;
    } else {
        var content = [{'error' : 'please correct the input first before searching.'}] ;
        showFlashMessages(content);
        return false;
    }
}

function refreshFeed(type, more_flag, para, is_refresh_markers){
    if(typeof type == 'undefined') var type = 'index';
    if(typeof more_flag == 'undefined') var more_flag = false;
    if(typeof para == 'undefined') var para = [];
    if(typeof is_refresh_markers == 'undefined') var is_refresh_markers = true;
    
    if (type == 'index'){
        if ( !more_flag ){
            $.address.update();
            feed_para.last_id = null;
        }
        if (para != []) para = feed_para;
    } 
    
    para['type'] = type;
    
    
    if(!feed_refreshing){
        $('.loading.feed').show();
        feed_refreshing = true;
        jQuery.ajax({
                url: "<?php echo $this->baseUrl('ajax/feed/refresh') ?>",
                data: para,
                beforeSend:  function() {
                    if (more_flag) {
                        $(".load_more_feeds .loading").show();
                        $(".load_more_feeds .more").hide();
                    }
                },
                success: function(response){
                    if ($.isEmptyObject(response.data)){
                        hideMoreButton(more_flag);
                        removeMarkers();
                    } else {
                        if (type == 'index') {
                            <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                                map_markers_data = response.data;
                                if (is_refresh_markers) 
                                  refreshMarkers();
                                else addMarkers();
                            <?php } ?>
                            ns_feed.render(response, more_flag);
                        } else if (type == 'user_log'){
                            renderUserLogs(response, more_flag);
                        } else if ((type == 'tree_feeds')|| (type == 'tag_events')){
                            //renderTreeFeeds(response, more_flag);
                            ns_feed.render(response, more_flag);
                        }
                    }
                    feed_refreshing = false;
                    $('.loading.feed').hide();
                    return true;
                }
        });
    };
}

<?php // update url parameters from feed_para ?>
function updateUrlParam(key,value, to_be_updated){
    if (!to_be_updated) var to_be_updated = false;
    if (value === false){
        $.address.parameter(key, false);
    } else {
        $.address.parameter(key, encodeURIComponent(value));
    }
    if (to_be_updated) {
        $.address.update();
    }
}

function updateVariableAndUrlParamFromFeedInput(element){
    if (element.is('.feed_filter_input[name="is_match_interest"]') || element.is('.feed_filter_input[name="is_match_location"]') || element.is('.feed_filter_input[name="is_all_time"]')){
        var value = element.is(':checked') ? 1 : 0;
        feed_para[element.prop('name')] = value;
        updateUrlParam(element.prop('name'), value);
        if (element.is('.feed_filter_input[name="is_all_time"]')){
            updateUrlParam('is_all_time', value);
            if (value == 1){
                feed_para['begin_date'] = null;
                feed_para['end_date'] = null;
                updateUrlParam('begin_date', false);
                updateUrlParam('end_date', false);
            } else{
                feed_para['begin_date'] = $('.feed_filter_input[name="begin_date"]').val();
                feed_para['end_date'] = $('.feed_filter_input[name="end_date"]').val();
                updateUrlParam('begin_date', $('.feed_filter_input[name="begin_date"]').val());
                updateUrlParam('end_date', $('.feed_filter_input[name="end_date"]').val());
            }
        }
    } else if (element.is('.feed_filter_input[name="sort_by"]') || element.is('.feed_filter_input[name="q"]') || element.is('.feed_filter_input[name="begin_date"]') || element.is('.feed_filter_input[name="end_date"]')){
        feed_para[element.prop('name')] = element.val();
        updateUrlParam(element.prop('name'), element.val());
    } else if (element.is('.feed_filter_input[name="is_show_map"]')){ // this doesn't load the feed again so url needs to update instantly
        feed_para[element.prop('name')] = element.val();
        updateUrlParam(element.prop('name'), element.val(), true);
        
    }
}

jQuery(function($){
    $.address.autoUpdate(false);
    if ($('.feeds.index').length) initIndexFeed();
    $('body#index')
        <?php // event that the submit button is needed to be clicked before searching, e.g. search field ?>
        .on('change keyup', '#feed_search input[name="q"], #feed_search input[name="is_all_time"], #feed_search input[name="begin_date"], #feed_search input[name="end_date"]', function(){
            addChangedFeedInputName($(this));
        })
        .on('click', '#feed_search input[type="submit"]', function(e){
            e.preventDefault();
            if (feed_refreshing) return false;
            if (validateSidebarSearchInputs()){
                for( key in changed_feed_input_names){
                    updateVariableAndUrlParamFromFeedInput($('*[name="'+changed_feed_input_names[key]+'"]'));
                }
            }
            refreshFeed('index');
        });
       
});
</script>