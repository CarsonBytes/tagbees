<script type="text/javascript">
// feed content including in sidebar, that's why we put feed functions here
var ns_feeds = {
  feed_para: {},
  default_feed_para: {},
  map_markers_data: [],
  changed_feed_input_names: [],
  is_refreshing : false,
  <?php // render any kinds of feed and/or more html based on javascript template ?>
  render: function(data_arr, more_flag, template_id){
    if (typeof more_flag == 'undefined') var more_flag=false;
    if (typeof template_id == 'undefined') var template_id = 'feed_index_item';
      var feeds_html = ns_feeds.getHTML(data_arr, template_id);
      
      if (more_flag) feeds_html.appendTo( ".feeds_and_more .feeds");
      else $(".feeds_and_more .feeds").html(feeds_html);
      
      //decide if number of feeds is less than expected plus it's not a 'more' action, then the more button is not needed
      if (feeds_html.length == 0 <?php //echo Zend_Registry::get('config')->filter->user_para->rpp ?>){
          ns_common_foot.hideMoreButton(more_flag);
      }else{
          $('.load_more_feeds .loading').hide();
          $('.load_more_feeds .more').show();
      }
      
      var popup_content = ns_feeds.getHTML(data_arr, 'bookmark_popup', ns_common_bookmark_popup.tmpl_functions);
      $('body').append(popup_content);
      
      ns_feeds.attachEvents();
  },
  getHTML: function(data_arr, template_id, custom_functions){
    if (typeof template_id == 'undefined') var template_id = 'feed_index_item';
    if (typeof custom_functions == 'undefined') var custom_functions = {};
    
    var functions = $.extend(true, {}, {
        getMainPicTitle: function(){
            var img_is_main_pics =this.data.img_is_main_pics.split(',');
            var img_captions =this.data.img_captions.split(',');
            for( index in img_is_main_pics){
                if (img_is_main_pics[index] == 1){
                    return img_captions[index];
                }
            }
        },
        getMainPicURL: function(){
            var img_is_main_pics =this.data.img_is_main_pics.split(',');
            var img_filenames =this.data.img_filenames.split(',');
            for( index in img_is_main_pics){
                if (img_is_main_pics[index] == 1){
                    return '<?php echo $this->baseUrl('uploads');?>/'+img_filenames[index];
                }
            }
            return '<?php echo Common::changePathToURL(Common::config()->pics->event->public);?>';
        },
        hasMainCat: function(){
            if (this.data.tree_ids && this.data.tree_ids.main){
              return !(jQuery.isEmptyObject(this.data.tree_ids.main));
            }else{
              return false;
            }
            
        },
        getMainCatName: function(){
            var main_cat_ids = this.data.tree_ids.main;
            var keys = $.keys(main_cat_ids);
            return data_arr.tree_tags[main_cat_ids[keys[keys.length-1]]]['name'];
        },
        getMainCatURL: function(){
            var main_cat_ids = this.data.tree_ids.main;
            var url = [];
            for (index in main_cat_ids){
              if (typeof data_arr.tree_tags[main_cat_ids[index]] != 'undefined'){
                  url.push(data_arr.tree_tags[main_cat_ids[index]]['slug_name']);
              }else {
                  //unknown error: data_arr.tree_tags[main_cat_ids[index]] can be undefined...
                  alert('Error occured, please refresh the page.');
                  return '';
              }
            }
            url = url.join('/');
            return '<?php echo $this->baseUrl('tree');?>/'+url;
        },
        urldecode: function() {
           //console.log(this.data);
          if (typeof arguments[0] == 'string') 
              return decodeURIComponent((arguments[0]+'').replace(/\+/g, '%20')).replace('\n','<br />');
              //return $("<div/>").html(arguments[0]).text();
          else return '';
        },
        formatMysqlDate: function() { 
            if (typeof arguments[0] == 'string') 
              return $.datepicker.formatDate('dd M yy', ns_common_foot.mysqlTimeStampToDate(arguments[0]));
        },
        tagHTML: function() {
            var tag_slug_names =this.data.tag_slug_names.split(',');
            var tag_names =this.data.tag_names.split(',');
            var tag_types =this.data.tag_types.split(',');
            var html = [];
            for( index in tag_slug_names){
              if (tag_names[index]!='' && tag_slug_names[index]!='' && tag_slug_names[index]!='')
                  html.push('<a href="<?php echo $this->baseUrl();?>/'+tag_types[index]+'/'+tag_slug_names[index]+'">'+tag_names[index]+'</a>');
            }
            return html.join(', ');
        }
    } , custom_functions);
    
    //console.log(data_arr);
    return $( "#"+template_id ).tmpl(data_arr.data,functions);
  },
  attachEvents: function(){
    
    $("abbr.timeago").timeago();
    
    $(".post_right div.content").dotdotdot({
            wrap : 'letter',
            height: 80
    });
    
    $(".direction-arrow").each( function(){
        var direction=$(this).attr('class').replace('direction-arrow ','');
        if (direction!=''){
            $(this).css('display','inline-block');
            $(this).rotate(parseInt(direction));
        }else{
            //$(this).css('display','none');
        }
    })
  },
  initMap: function(elem){
    var map;
    var elevator;
    //var latlng=new google.maps.LatLng('44.339565', '-114.960937');
    var coords = [elem.attr('data-lat'),elem.attr('data-lng')];
   
    // Setup place_lat/long coordinates
    var latlng = new google.maps.LatLng(parseFloat(coords[0]), parseFloat(coords[1]));
   
    var styleArray = [
        {
            featureType: "all",
            stylers: [{ visibility: "off" }]
        },
        {
            featureType: "road",
            stylers: [{ visibility: "on" }]
        },
        {
            featureType: "administrative",
            stylers: [{ visibility: "on" }]
        }
    ];
    var myOptions = {
      styles: styleArray,
      scrollwheel: false,
      zoom: 12, // Close zoom!
      center: latlng,
      mapTypeId: google.maps.MapTypeId.ROADMAP // Use the classic roadmap
    };
    
    map = new google.maps.Map(elem[0], myOptions);
    
    var marker = new google.maps.Marker({
        position: latlng,
        map: map,
        //icon: 'http://google-maps-icons.googlecode.com/files/walking-tour.png',
        draggable: true
    });
  },
  addChangedFeedInputName: function(element){
    if ($.inArray(element.prop('name'),ns_feeds.changed_feed_input_names) == -1)ns_feeds.changed_feed_input_names.push(element.prop('name'));
  },
  validateSidebarSearchInputs: function(){
    if (feed_search_form.form()){
        return true;
    } else {
        var content = [{'error' : 'please correct the input first before searching.'}] ;
        ns_common_foot.showFlashMessages(content);
        return false;
    }
  },
  <?php // make sure it runs only once each time, refresh map, and render feed ?>
  refresh: function(type, more_flag, para){
    if(typeof type == 'undefined') var type = 'index';
    if(typeof more_flag == 'undefined') var more_flag = false;
    if(typeof para == 'undefined') var para = [];
    
    if (type == 'index'){
        if ( !more_flag ){
            $.address.update();
            ns_feeds.feed_para.last_id = null;
        }
        if (para != []) para = ns_feeds.feed_para;
    } 
    
    para['type'] = type;
    
    
    if(!ns_feeds.is_refreshing){
        $('.loading.feed').show();
        ns_feeds.is_refreshing = true;
        jQuery.ajax({
          url: "<?php echo $this->baseUrl('ajax/feed/refresh') ?>",
          data: para,
          beforeSend:  function() {
              if (more_flag) {
                  $(".load_more_feeds .loading").show();
                  $(".load_more_feeds .more").hide();
              }
          },
          success: function(response){
            if ($.isEmptyObject(response.data)){
              ns_common_foot.hideMoreButton(more_flag);
              if (typeof ns_filter_map != 'undefined') {
                ns_feeds.map_markers_data = response.data;
                if (more_flag) ns_filter_map.addMarkers();
                else ns_filter_map.removeMarkers();
              }
            } else {
              if (type == 'index') {
                <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                    ns_feeds.map_markers_data = response.data;
                    if (more_flag) ns_filter_map.addMarkers();
                    else ns_filter_map.refreshMarkers();
                <?php } ?>
                ns_feeds.render(response, more_flag);
              } else if (type == 'user_log'){
                renderUserLogs(response, more_flag);
              } else if ((type == 'tree_feeds')|| (type == 'tag_events')){
                  //renderTreeFeeds(response, more_flag);
                ns_feeds.render(response, more_flag);
              }
            }
            ns_feeds.is_refreshing = false;
            $('.loading.feed').hide();
            return true;
          }
        });
    };
  },
  <?php // update url parameters from ns_feeds.feed_para ?>
  updateUrlParam: function(key,value, to_be_updated){
    if (!to_be_updated) var to_be_updated = false;
    if (value === false){
        $.address.parameter(key, false);
    } else {
        $.address.parameter(key, encodeURIComponent(value));
    }
    if (to_be_updated) {
        $.address.update();
    }
  },
  updateVariableAndUrlParamFromFeedInput: function(element){
    if (element.is('.feed_filter_input[name="is_match_interest"]') || element.is('.feed_filter_input[name="is_match_location"]') || element.is('.feed_filter_input[name="is_all_time"]')){
        var value = element.is(':checked') ? 1 : 0;
        ns_feeds.feed_para[element.prop('name')] = value;
        ns_feeds.updateUrlParam(element.prop('name'), value);
        if (element.is('.feed_filter_input[name="is_all_time"]')){
            ns_feeds.updateUrlParam('is_all_time', value);
            if (value == 1){
                ns_feeds.feed_para['begin_date'] = null;
                ns_feeds.feed_para['end_date'] = null;
                ns_feeds.updateUrlParam('begin_date', false);
                ns_feeds.updateUrlParam('end_date', false);
            } else{
                ns_feeds.feed_para['begin_date'] = $('.feed_filter_input[name="begin_date"]').val();
                ns_feeds.feed_para['end_date'] = $('.feed_filter_input[name="end_date"]').val();
                ns_feeds.updateUrlParam('begin_date', $('.feed_filter_input[name="begin_date"]').val());
                ns_feeds.updateUrlParam('end_date', $('.feed_filter_input[name="end_date"]').val());
            }
        }
    } else if (element.is('.feed_filter_input[name="sort_by"]') || element.is('.feed_filter_input[name="q"]') || element.is('.feed_filter_input[name="begin_date"]') || element.is('.feed_filter_input[name="end_date"]')){
        ns_feeds.feed_para[element.prop('name')] = element.val();
        ns_feeds.updateUrlParam(element.prop('name'), element.val());
    } else if (element.is('.feed_filter_input[name="is_show_map"]')){ // this doesn't load the feed again so url needs to update instantly
        ns_feeds.feed_para[element.prop('name')] = element.val();
        ns_feeds.updateUrlParam(element.prop('name'), element.val(), true);
        
    }
  },
  updateSortByInput: function(value){
    $('nav.sort_by ul li').removeClass('current');
    $('nav.sort_by ul li[data-value="'+value+'"]').addClass('current');
    $('.feed_filter_input[name="sort_by"]').val(value);
  },
  <?php //update feed option inputs from ns_feeds.feed_para ?>
  updateFeedInputsFromVariables: function(){
    for (key in ns_feeds.feed_para){
        if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
            if (ns_feeds.feed_para[key] == 1) {
                jQuery('.feed_filter_input[name="'+key+'"]').prop('checked','checked');
            } else {
                jQuery('.feed_filter_input[name="'+key+'"]').removeProp('checked','checked');
            }
            if (key == 'is_show_map'){
                if (ns_feeds.feed_para[key] == 1){
                   $('#map_wrapper').show();
                    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                        ns_filter_map.initMap();
                    <?php } ?>
                }
            }
        } else if (key == 'sort_by'){
            ns_feeds.updateSortByInput(ns_feeds.feed_para[key]);
        } else if (key == 'q') { 
        } else if (key == 'radius') {
            $('.feed_filter_input[name="'+key+'"]').val(ns_feeds.feed_para[key]);
            $('#filter_radius').text(ns_feeds.feed_para[key]);
        } else if (key == 'begin_date' || key == 'end_date') {
            $('.feed_filter_input[name="'+key+'"]').datepicker("setDate", ns_feeds.feed_para[key] );
        }
    }
    if (ns_feeds.feed_para['is_match_location']==1){
        jQuery('.match_location_set').show();
    } else {
        jQuery('.match_location_set').hide();
    }

    if ( !("is_all_time" in ns_feeds.feed_para) ||  ns_feeds.feed_para['is_all_time']==1){
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').prop('disabled','disabled');
    } else {
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').removeProp('disabled');
    }
  },
  isFeedParameterValid: function(key, value){
    if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
        if (value == "") return false;
            if (value == 1 || value == 0) return true;
    } else if (key == 'sort_by'){
        if (value == "") return false;
        if (value == 2 || value == 1 || value == 0) return true;
    } else if (key == 'q') {
         return true;
    } else if (key == 'radius' || key == 'place_lat' || key == 'place_lng') {
        if (ns_common_foot.isNumber(value) || value == "") return true;
    } else if (key == 'begin_date' || key == 'end_date') {
        if (value == "") return true;
        var regex = /^\d{4}-\d{1,2}-\d{1,2}$/gm;
        if (regex.test(value)) return true;
    }
    return false;
  }
}

jQuery(function($){
    //begin date and end date for sidebar and feed para
    var today = new Date();
    var end_date = new Date();
    end_date.setDate(today.getDate()+60);
    ns_feeds.default_feed_para['q'] = '';
    ns_feeds.default_feed_para['begin_date'] = $.datepicker.formatDate('yy-mm-dd', today);
    ns_feeds.default_feed_para['end_date'] = $.datepicker.formatDate('yy-mm-dd', end_date);
    ns_feeds.default_feed_para = $.extend(
        true, 
        jQuery.parseJSON('<?php echo json_encode(Zend_Registry::get('config')->filter->user_para->toArray()) ?>'),
        ns_feeds.default_feed_para
    );
    
    $.address.autoUpdate(false);
    if ($('.feeds.index').length) ns_feedss_index_events.initIndexFeed();
    $('body#index')
      <?php // event that the submit button is needed to be clicked before searching, e.g. search field ?>
      .on('change keyup', '#feed_search input[name="q"], #feed_search input[name="is_all_time"], #feed_search input[name="begin_date"], #feed_search input[name="end_date"]', function(){
          ns_feeds.addChangedFeedInputName($(this));
      })
      .on('click', '#feed_search input[type="submit"]', function(e){
          e.preventDefault();
          if (ns_feeds.is_refreshing) return false;
          if (ns_feeds.validateSidebarSearchInputs()){
              for( key in ns_feeds.changed_feed_input_names){
                  ns_feeds.updateVariableAndUrlParamFromFeedInput($('*[name="'+ns_feeds.changed_feed_input_names[key]+'"]'));
              }
          }
          ns_feeds.refresh('index');
      });
    
    $('body').on('click','.tag_top a.place',function(e){
      e.preventDefault();
      var gmap = $(this).parents('article.post_content').find('.gmap');
      console.log(gmap);
      if (!gmap.is(':visible') ){
        gmap.show();
        ns_feeds.initMap(gmap);
      } else {
        gmap.hide();
      }
    })
});
</script>