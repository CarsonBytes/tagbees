<script type="text/javascript">
var today = new Date();
var end_date=new Date();
end_date.setDate(end_date.getDate()+60);
var default_feed_para = jQuery.parseJSON('<?php echo json_encode(Zend_Registry::get('config')->filter->user_para->toArray()) ?>');
    default_feed_para['q'] = '';
    default_feed_para['begin_date'] = $.datepicker.formatDate('yy-mm-dd', today);
    default_feed_para['end_date'] = $.datepicker.formatDate('yy-mm-dd', end_date);

var feed_para = {};

var changed_feed_input_names = [];

//form date validation
var feed_search_form = $("#feed_search").validate({
  rules: {
    begin_date: {
      date: true
    }, 
    end_date: {
      date: true
    }
  }
});

var feed_refreshing = false;
var map_markers_data;

jQuery(function($){
    if ($('.feeds').length) initFeed();
    $('body')
        <?php // event that the submit button is needed to be clicked before searching, e.g. search field ?>
        .on('change keyup', '#feed_search input[name="q"], #feed_search input[name="is_all_time"], #feed_search input[name="begin_date"], #feed_search input[name="end_date"]', function(){
                console.log(changed_feed_input_names)
            if ($.inArray($(this).prop('name'),changed_feed_input_names) == -1)changed_feed_input_names.push($(this).prop('name'));
                console.log(changed_feed_input_names)
        })
        .on('click', '#feed_search input[type="submit"]', function(e){
            e.preventDefault();
            if (feed_refreshing) return false;
            if (feed_search_form.form()){
                for( key in changed_feed_input_names){
                    updateVariableAndUrlParameterFromFeedOptionInput($('*[name="'+changed_feed_input_names[key]+'"]'));
                }
                refreshFeed();
            } else {
                var content = [{'error' : 'please correct the input first before searching.'}] ;
                showFlashMessages(content);
                return false;
            }
        })//update user feed action
        .on('click', '.feed_filter_input[name="is_show_map"], a.feed_type_link, .feed_filter_input[name="is_match_interest"], .feed_filter_input[name="is_match_location"], #refresh_feed', function(e){
            if (feed_refreshing) return false;
            if ($(this).is('a.feed_type_link'))  e.preventDefault();
            if (!$.isEmptyObject(changed_feed_input_names)) {
                if (feed_search_form.form()){
                    for( key in changed_feed_input_names){
                        updateVariableAndUrlParameterFromFeedOptionInput($('#'+changed_feed_input_names[key]));
                    }
                    changed_feed_input_names = [];
                } else {
                    var content = [{'error' : 'please correct the input first before searching.'}] ;
                    showFlashMessages(content);
                    return false;
                }
            }
            else if ($(this).is('.feed_filter_input[name="is_match_location"]')){
                jQuery( ".radius_amt span#filter_radius" ).text( jQuery( "#radius_slider" ).slider( "option", "value" ));
                if (jQuery('.feed_filter_input[name="is_match_location"]').is(':checked')){
                    jQuery( ".match_location_set" ).css('display','block');
                    $('#locate_somewhere').prop('disabled',false);
                    initDistanceWidget();
                }else{
                    jQuery( ".match_location_set" ).hide();
                    $('#locate_somewhere').prop('disabled',true);
                    distanceWidget.set('map', null);
                }
            } 
            <?php if (empty($_SESSION['user'])) { ?>
                else if ($(this).is('.feed_filter_input[name="is_match_interest"]')) {
                    var content = [{'error' : '<?php echo $this->translate('To customise your own interest, please login first.') ?>'}] ;
                    showFlashMessages(content);
                    $(this).prop('checked',false);
                    return false;
                }
            <?php } ?>
            updateVariableAndUrlParameterFromFeedOptionInput($(this));   
            
            // refresh feed is not needed for showing map
            if ($(this).is('.feed_filter_input[name="is_show_map"]')) {
                <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                        $('#map-wrapper').toggle();
                        initMapAndAutoComplete();
                        return true;
                <?php } else { ?>
                    var content = [{'debug' : '<?php echo $this->translate('Online mode is off. Please check application.ini to make sure server.online = 1') ?>'}] ;
                    showFlashMessages(content);
                <?php } ?>
            }
            refreshFeed();
        })
        //when user clicks load more
        .on("click",'.load_more',function() {
            /item_(\d+)/.exec($('.stream > .Post:last').prop("id"));
            var data = clone(feed_para, {'last_id':RegExp.$1});
            loadMoreFeeds('<?php echo $this->baseUrl('ajax/feed/refresh') ?>', data);
            return false;
        });
       
});


function initFeed(){ 
    for (key in default_feed_para){
        var value = getURLParameterValue(key);
        if (isFeedParameterValid(key, value) && value != ""){
            feed_para[key] = value;
            updateUrlParam(key, value);
        } else {
            feed_para[key] = default_feed_para[key];
        }
    }
    updateFeedOptionInputsFromVariables();
    
    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
        initMapAndAutoComplete();
    <?php } ?>
    
    $( "#radius_slider" ).slider({
        range: "min",
        value:feed_para['radius'],
        step: 0.01,
        min: minDistance,
        max: maxDistance,
        slide: function( event, ui ) {
            $( ".radius_amt span#filter_radius" ).text( ui.value );
            
        },
        change: function( event, ui ) {
            $( ".radius_amt span#filter_radius" ).text( ui.value );
            if ($("#map").is(":visible")){
                distanceWidget.set('distance',ui.value);
                radiusWidget.bindTo('center', distanceWidget, 'position');
                map.fitBounds(radiusWidget.get('bounds'));
            }
          feed_para['radius'] = ui.value;
          updateUrlParam('radius', ui.value);
          //refreshFeed();
        }
    });
    
    //refreshFeed();
}

function isFeedParameterValid(key, value){
    if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
        if (value == "") return false;
            if (value == 1 || value == 0) return true;
    } else if (key == 'sort_by'){
        if (value == "") return false;
        if (value == 2 || value == 1 || value == 0) return true;
    } else if (key == 'q') {
         return true;
    } else if (key == 'radius' || key == 'lat' || key == 'lng') {
        if (isNumber(value) || value == "") return true;
    } else if (key == 'begin_date' || key == 'end_date') {
        if (value == "") return true;
        var regex = /^\d{4}-\d{1,2}-\d{1,2}$/gm;
        if (regex.test(value)) return true;
    }
    return false;
}
function refreshFeed(){
    jQuery('.stream').fadeIn("medium");
    $('.loading.feed').show();
    $('#dynamic_link').hide();
    $('#dynamic_link_click').show();
    if (is_url_updated) $.address.update();
    if(!feed_refreshing){
        //feed_refreshing=true;
        jQuery.ajax({
                type: "POST",
                url: "<?php echo $this->baseUrl('ajax/feed/refresh') ?>",
                data: feed_para,
                success: function(msg){
                        if (msg['result'] == 0){
                            var content = [{'error' : '<?php echo $this->translate('No results.')?>'}] ;
                            showFlashMessages(content);
                            jQuery('.load_more').hide();
                            jQuery('.stream').html('');
                        } else {
                            jQuery('.load_more').css('display','block');
                        }
                        
        <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                        map_markers_data = msg['json'];
                        refreshMarkers();
        <?php } ?>
                        
                        
                        jQuery('.stream').html(msg['html']);
                        jQuery('.pagination').html(msg['pagination']);
    
                        toggleSortByInput();
                        attachFeedItemEvents();
        
                        $('.loading.feed').hide();
                        feed_refreshing=false;
                },
            dataType:'json'
        });
    };
}

<?php // update url parameters from feed_para ?>
var is_url_updated = false;
function updateUrlParam(key,value, to_be_updated){
    if (typeof to_be_updated == 'undefined') var to_be_updated = false;
    if (value === false){
        $.address.parameter(key, false);
    } else {
        $.address.parameter(key, encodeURIComponent(value));
    }
    if (to_be_updated) {
        $.address.update();
        is_url_updated = false;
    } else {
        is_url_updated = true;
    }
}

<?php //update feed option inputs from feed_para ?>
function updateFeedOptionInputsFromVariables(){
    for (key in feed_para){
        if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
            if (feed_para[key] == 1) {
                jQuery('.feed_filter_input[name="'+key+'"]').prop('checked','checked');
            } else {
                jQuery('.feed_filter_input[name="'+key+'"]').removeProp('checked','checked');
            }
            if (key == 'is_show_map'){
                if (feed_para[key] == 1){
                   $('#map-wrapper').show();
                    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                        initMapAndAutoComplete();
                    <?php } ?>
                }
            }
        } else if (key == 'sort_by'){
            toggleSortByInput();
        } else if (key == 'q') {
            jQuery('form.search .entryEditSearch').val(feed_para[key]);    
        } else if (key == 'radius') {
            jQuery( '.feed_filter_input[name="radius"]' ).text(feed_para[key]);
        } else if (key == 'begin_date' || key == 'end_date') {
            $('.feed_filter_input[name="'+key+'"]').datepicker("setDate", feed_para[key] );
        }
    }
    if (feed_para['is_match_location']==1){
        jQuery('.match_location_set').css('display','block');
    } else {
        jQuery('.match_location_set').css('display','none');
    }
    if (feed_para['is_all_time']==1){
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').prop('disabled','disabled');
    } else {
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').removeProp('disabled');
    }
}

function toggleSortByInput() {
}

function updateVariableAndUrlParameterFromFeedOptionInput(element){
        if (element.is('.feed_filter_input[name="is_match_interest"]') || element.is('.feed_filter_input[name="is_match_location"]') || element.is('.feed_filter_input[name="is_all_time"]') || element.is('.feed_filter_input[name="is_show_map"]')){
            var value = element.is(':checked') ? 1 : 0;
            feed_para[element.prop('name')] = value;
            if (element.is('.feed_filter_input[name="is_show_map"]')){
                updateUrlParam('is_show_map', value, true);
            } else if (element.is('.feed_filter_input[name="is_all_time"]')){
                updateUrlParam('is_all_time', value);
                if (value == 1){
                    feed_para['begin_date'] = null;
                    feed_para['end_date'] = null;
                    updateUrlParam('begin_date', false);
                    updateUrlParam('end_date', false);
                } else{
                    feed_para['begin_date'] = $('.feed_filter_input[name="begin_date"]').val();
                    feed_para['end_date'] = $('.feed_filter_input[name="end_date"]').val();
                    updateUrlParam('begin_date', $('.feed_filter_input[name="begin_date"]').val());
                    updateUrlParam('end_date', $('.feed_filter_input[name="end_date"]').val());
                }
            }
        } else if (element.is('.feed_filter_input[name="sort_by"]')){
            feed_para['sort_by'] = element.val();
            updateUrlParam('sort_by', element.val());
        } else if (element.is('.feed_filter_input[name="q"]')) {
            feed_para['q'] = element.val();    
            updateUrlParam('q', element.val());
        } else if (element.is('.feed_filter_input[name="begin_date"]') || element.is('*[name="end_date"]')) {
            feed_para[element.prop('name')] = element.val();
            updateUrlParam(element.prop('name'), element.val());
        }
}

function loadMoreFeeds(url, data){
    jQuery.ajax({
        type: "POST",
        url: url,
        data: data, 
        beforeSend:  function() {
            jQuery('a.load_more').html('<img src="<?php echo $this->baseUrl('images/loading_more.gif') ?>" />');//Loading image during the Ajax Request
        },
        success: function(msg){//html = the server response html code
             jQuery('a.load_more').html('<?php echo $this->translate('load more')?>');
            if (msg['result'] == 0){
                var content = [{'error' : '<?php echo $this->translate('There is no more to load.')?>'}] ;
                showFlashMessages(content);
                jQuery('a.load_more').hide();
            } else {
                jQuery('.hidden_stream').html(msg['html']);
                jQuery(".stream").append(jQuery('.hidden_stream').fadeIn(400));
                
        <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                map_markers_data.push = msg['json'];
                refreshMarkers();
        <?php } ?>
        
                attachFeedItemEvents();
                jQuery(".stream .hidden_stream").delay(400).queue(function(){
                      jQuery(this).children().unwrap();
                })
                jQuery('#more').after('<div class="hidden_stream" style="display:none;"></div>')
            }
            return true;
        }
    });     
}
</script>