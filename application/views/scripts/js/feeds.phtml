<script type="text/javascript">
var default_feed_para = jQuery.parseJSON('<?php echo json_encode(Zend_Registry::get('config')->filter->user_para->toArray()) ?>');
    default_feed_para['q'] = '';
    default_feed_para['begin_date'] = $.datepicker.formatDate('yy-mm-dd', today);
    default_feed_para['end_date'] = $.datepicker.formatDate('yy-mm-dd', end_date);

var feed_para = {};

var changed_feed_input_names = [];

//form date validation
var feed_search_form = $("#feed_search").validate({
  rules: {
    begin_date: {
      date: true
    }, 
    end_date: {
      date: true
    }
  }
});

var feed_refreshing = false;

function addChangedFeedInputName(element){
    if ($.inArray(element.prop('name'),changed_feed_input_names) == -1)changed_feed_input_names.push(element.prop('name'));
}

function validateSidebarSearchInputs(){
    if (feed_search_form.form()){
        return true;
    } else {
        var content = [{'error' : 'please correct the input first before searching.'}] ;
        showFlashMessages(content);
        return false;
    }
}

function initFeed(){ 
    updateVariablesFromUrlParams();
    updateFeedInputsFromVariables();
    
    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
        initMapAndAutoComplete();
    <?php } ?>
    
    $( "#radius_slider" ).slider({
        range: "min",
        value:feed_para['radius'],
        step: 0.01,
        min: minDistance,
        max: maxDistance,
        slide: function( event, ui ) {
            $( ".radius_amt span#filter_radius" ).text( ui.value );
            
        },
        change: function( event, ui ) {
            $( ".radius_amt span#filter_radius" ).text( ui.value );
            if ($("#map").is(":visible")){
                distanceWidget.set('distance',ui.value);
                radiusWidget.bindTo('center', distanceWidget, 'position');
                map.fitBounds(radiusWidget.get('bounds'));
            }
          feed_para['radius'] = ui.value;
          updateUrlParam('radius', ui.value);
        }
    });
}

function isFeedParameterValid(key, value){
    if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
        if (value == "") return false;
            if (value == 1 || value == 0) return true;
    } else if (key == 'sort_by'){
        if (value == "") return false;
        if (value == 2 || value == 1 || value == 0) return true;
    } else if (key == 'q') {
         return true;
    } else if (key == 'radius' || key == 'lat' || key == 'lng') {
        if (isNumber(value) || value == "") return true;
    } else if (key == 'begin_date' || key == 'end_date') {
        if (value == "") return true;
        var regex = /^\d{4}-\d{1,2}-\d{1,2}$/gm;
        if (regex.test(value)) return true;
    }
    return false;
}
function refreshFeed(type, more_flag){
    if(typeof type == 'undefined') var type = 'index';
    if(typeof more_flag == 'undefined') var more_flag = false;
    if (!more_flag) {
        $.address.update();
        feed_para.last_id = null;
    }
    if(!feed_refreshing){
        jQuery.ajax({
                url: "<?php echo $this->baseUrl('ajax/feed/refresh') ?>",
                data: feed_para,
                beforeSend:  function() {
                    if (more_flag) {
                        $(".more_div .loading").show();
                        $(".more_div .more").hide();
                    }
                },
                success: function(response){
                    if ($.isEmptyObject(response.data)){
                        //var content = [{'error' : '<?php echo $this->translate('There is no more to load.')?>'}] ;
                        //showFlashMessages(content);
                        $('.post .feeds').html('<p>No results. Please loosen the filters</p>');
                        $(".more_div .more").hide();
                        $(".more_div .loading").hide();
                    } else {
                <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                        if (!map_markers_data) var map_markers_data = [];
                        map_markers_data.push = response.data;
                        refreshMarkers();
                <?php } ?>
                        if (type == 'index') renderIndexFeeds(response.data, more_flag);
                    }
                    return true;
                }
        });
    };
}

<?php // update url parameters from feed_para ?>
function updateUrlParam(key,value, to_be_updated){
    if (!to_be_updated) var to_be_updated = false;
    if (value === false){
        $.address.parameter(key, false);
    } else {
        $.address.parameter(key, encodeURIComponent(value));
    }
    if (to_be_updated) {
        $.address.update();
    }
}

<?php //update variables from url parameters ?>
function updateVariablesFromUrlParams(){
    for (key in default_feed_para){
        var value = getURLParameterValue(key);
        if (isFeedParameterValid(key, value) && value != ""){
            feed_para[key] = value;
            updateUrlParam(key, value);
        } else {
            feed_para[key] = default_feed_para[key];
        }
    }
}

<?php //update feed option inputs from feed_para ?>
function updateFeedInputsFromVariables(){
    for (key in feed_para){
        if (key == 'is_match_interest' || key == 'is_match_location' || key == 'is_all_time' || key == 'is_show_map'){
            if (feed_para[key] == 1) {
                jQuery('.feed_filter_input[name="'+key+'"]').prop('checked','checked');
            } else {
                jQuery('.feed_filter_input[name="'+key+'"]').removeProp('checked','checked');
            }
            if (key == 'is_show_map'){
                if (feed_para[key] == 1){
                   $('#map-wrapper').show();
                    <?php if (Zend_Registry::get('config_ini')->server->online==1){ ?>
                        initMapAndAutoComplete();
                    <?php } ?>
                }
            }
        } else if (key == 'sort_by'){
            updateSortByInput(feed_para[key]);
        } else if (key == 'q') { 
        } else if (key == 'radius') {
            $('.feed_filter_input[name="'+key+'"]').val(feed_para[key]);
            $('#filter_radius').text(feed_para[key]);
        } else if (key == 'begin_date' || key == 'end_date') {
            $('.feed_filter_input[name="'+key+'"]').datepicker("setDate", feed_para[key] );
        }
    }
    if (feed_para['is_match_location']==1){
        jQuery('.match_location_set').css('display','block');
    } else {
        jQuery('.match_location_set').css('display','none');
    }
    if (feed_para['is_all_time']==1){
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').prop('disabled','disabled');
    } else {
        jQuery('.feed_filter_input[name="begin_date"],.feed_filter_input[name="end_date"]').removeProp('disabled');
    }
}

function updateVariableAndUrlParamFromFeedInput(element){
    if (element.is('.feed_filter_input[name="is_match_interest"]') || element.is('.feed_filter_input[name="is_match_location"]') || element.is('.feed_filter_input[name="is_all_time"]') || element.is('.feed_filter_input[name="is_show_map"]')){
        var value = element.is(':checked') ? 1 : 0;
        feed_para[element.prop('name')] = value;
        updateUrlParam(element.prop('name'), value);
        if (element.is('.feed_filter_input[name="is_all_time"]')){
            updateUrlParam('is_all_time', value);
            if (value == 1){
                feed_para['begin_date'] = null;
                feed_para['end_date'] = null;
                updateUrlParam('begin_date', false);
                updateUrlParam('end_date', false);
            } else{
                feed_para['begin_date'] = $('.feed_filter_input[name="begin_date"]').val();
                feed_para['end_date'] = $('.feed_filter_input[name="end_date"]').val();
                updateUrlParam('begin_date', $('.feed_filter_input[name="begin_date"]').val());
                updateUrlParam('end_date', $('.feed_filter_input[name="end_date"]').val());
            }
        }
    } else if (element.is('.feed_filter_input[name="sort_by"]') || element.is('.feed_filter_input[name="q"]') || element.is('.feed_filter_input[name="begin_date"]') || element.is('*[name="end_date"]')){
        feed_para[element.prop('name')] = element.val();
        updateUrlParam(element.prop('name'), element.val());
    }
}

jQuery(function($){
    $.address.autoUpdate(false);
    if ($('.feeds').length) initFeed();
    $('body')
        <?php // event that the submit button is needed to be clicked before searching, e.g. search field ?>
        .on('change keyup', '#feed_search input[name="q"], #feed_search input[name="is_all_time"], #feed_search input[name="begin_date"], #feed_search input[name="end_date"]', function(){
            addChangedFeedInputName($(this));
        })
        .on('click', '#feed_search input[type="submit"]', function(e){
            e.preventDefault();
            if (feed_refreshing) return false;
            if (validateSidebarSearchInputs()){
                for( key in changed_feed_input_names){
                    updateVariableAndUrlParamFromFeedInput($('*[name="'+changed_feed_input_names[key]+'"]'));
                }
            }
            refreshFeed('index');
        });
       
});
</script>